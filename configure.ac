AC_INIT(libmaus2,2.0.483,[tischler@mpi-cbg.de],[libmaus2],[https://github.com/gt1/libmaus2])
LIBRARY_VERSION=2:483:0
AC_MSG_NOTICE([Configuring for source in directory ${srcdir}])
AC_CANONICAL_SYSTEM
AC_CANONICAL_HOST
AC_PROG_LIBTOOL

AM_INIT_AUTOMAKE([std-options subdir-objects tar-pax parallel-tests])
AM_CONFIG_HEADER(config.h)
AC_CONFIG_MACRO_DIR([m4])

AC_MSG_CHECKING([whether we are cross compiling])
ISNATIVE=
if test \( "${ac_cv_build}" = "${ac_cv_host}" \) -a \( "${ac_cv_build}" = "${ac_cv_target}" \) ; then
	ISNATIVE=1
	AC_MSG_RESULT([no])
else
	ISNATIVE=0
	AC_MSG_RESULT([yes])
fi

AC_PATH_PROG(BASHPROG,bash,no)
AC_PATH_PROG(BASE64PROG,base64,no)

TESTDIR=
if test \( "${ISNATIVE}" -eq 1 \) -a \( "${BASHPROG}" != "no" \) -a \( "${BASE64PROG}" != "no" \) ; then
	TESTDIR=test
fi

CFLAGS_SAVE="${CFLAGS}"
CFLAGS=""
AC_PROG_CC
AM_PROG_CC_C_O
CFLAGS="${CFLAGS_SAVE}"

abs_builddir="${PWD}"

CXXFLAGS_SAVE="${CXXFLAGS}"
CXXFLAGS=""
AC_PROG_CXX
CXXFLAGS="${CXXFLAGS_SAVE}"

AC_MSG_CHECKING([whether host cpu is x86_64])
HOSTCPUISX86_64=no
case ${host_cpu} in
	x86_64)
		HOSTCPUISX86_64=yes
		;;
esac
AC_MSG_RESULT([${HOSTCPUISX86_64}])

AC_MSG_CHECKING([whether host os is GNU/Linux])
HOSTOSISGNULINUX=no
case ${host_os} in
	linux-gnu)
		HOSTOSISGNULINUX=yes
		;;
esac
AC_MSG_RESULT([${HOSTOSISGNULINUX}])

AC_MSG_CHECKING([whether we are compiling for x86_64 CPU on GNU/Linux OS ])
HOSTISX86_64GNULINUX=no
if test \( ${HOSTCPUISX86_64} = "yes" \) -a \( ${HOSTOSISGNULINUX} = "yes"  \) ; then
	HOSTISX86_64GNULINUX=yes
fi
AC_MSG_RESULT([${HOSTISX86_64GNULINUX}])

if test "${HOSTISX86_64GNULINUX}" = "yes" ; then
	AC_ARG_ENABLE(native,
		AS_HELP_STRING([--enable-native],[use compiler flags suitable for running on build platform (default no)]),
		[nativegcc=${enableval}],[nativegcc=no])
	if test "${nativegcc}" = "yes" ; then
		AC_MSG_CHECKING([whether we can compile a program -march=native])
		AC_LANG_PUSH([C++])
		CXXFLAGS_SAVE="${CXXFLAGS}"
		CXXFLAGS="-march=native"
		AC_TRY_LINK([],[return 0;],[have_native_gcc=yes],[have_native_gcc=no])
		AC_MSG_RESULT([${have_native_gcc}])
		CXXFLAGS="${CXXFLAGS_SAVE}"
		AC_LANG_POP

		if test "${have_native_gcc}" = "yes" ; then
			CXXFLAGS="${CXXFLAGS} -march=native"
			CFLAGS="${CFLAGS} -march=native"
		fi
	fi
fi

YASMEXE=
DIGESTASMOBJ=
LIBMAUS2_HAVE_SHA2_ASSEMBLY=
if test ${HOSTISX86_64GNULINUX} = "yes" ; then
	AC_ARG_WITH([yasm],
		[AS_HELP_STRING([--with-yasm@<:@=PATH@:>@], [path to installed yasm program @<:@default=no@:>@])],
		[with_yasm=${withval}],
		[with_yasm=no])
		
	if test "${with_yasm}" != "no" ; then
		if test \( -z "${with_yasm}" \) -o \( "${with_yasm}" = "yes" \) ; then
			with_yasm=`which yasm`
		fi
		
		YASMEXE=${with_yasm}
		DIGESTASMOBJ="sha256_sse4.o sha256_avx1.o sha512_avx.o sha512_sse4.o"
		# yasm in Ubuntu precise cannot process the files below and we currently do not use them
		DIGESTASMOBJUNUSED="sha256_avx2_rorx2.o sha256_avx2_rorx8.o sha512_avx2_rorx.o"
		LIBMAUS2_HAVE_SHA2_ASSEMBLY="#define LIBMAUS2_HAVE_SHA2_ASSEMBLY"
	fi
fi

AC_CHECK_SIZEOF([unsigned long])
LIBMAUS2_SIZEOF_UNSIGNED_LONG="#define LIBMAUS2_SIZEOF_UNSIGNED_LONG $ac_cv_sizeof_unsigned_long"

LIBMAUSCPPFLAGS="${CPPFLAGS}"
LIBMAUSLDFLAGS="${LDFLAGS}"

PKG_PROG_PKG_CONFIG

LIBMAUS2_HAVE_IGZIP=
AC_ARG_WITH([igzip],
	[AS_HELP_STRING([--with-igzip@<:@=PATH@:>@], [path to installed igzip library @<:@default=no@:>@])],
	[with_igzip=${withval}],
	[with_igzip=no])

IGZIPCPPFLAGS=
IGZIPLDFLAGS=
IGZIPLIBS=
if test "${with_igzip}" != "no" ; then
	IGZIPPATH=${with_igzip}
	
	IGZIPCPPFLAGS=
	IGZIPLDFLAGS=
	IGZIPLIBS="-ligzip1c"
	
	if test ! -z "${IGZIPPATH}" ; then
		IGZIPCPPFLAGS="-I${IGZIPPATH}/include"
		IGZIPLDFLAGS="-L${IGZIPPATH}/lib -Wl,-rpath,${IGZIPPATH}/lib"
	fi
	
	CPPFLAGS_SAVE="${CPPFLAGS}"
	LDFLAGS_SAVE="${LDFLAGS}"
	LIBS_SAVE="${LIBS}"
	
	LIBS="${LIBS} ${IGZIPLIBS}"
	LDFLAGS="${LDFLAGS} ${IGZIPLDFLAGS}"
	CPPFLAGS="${CPPFLAGS} ${IGZIPCPPFLAGS}"

	AC_LANG_PUSH([C++])
	AC_MSG_CHECKING([whether we can compile a igzip program])
	AC_TRY_LINK([extern "C" {
#include <igzip_lib.h>
	}
	],[
	LZ_Stream2 stream;   
	init_stream(&stream);
	fast_lz(&stream);
	],[igzip=yes],[igzip=no])
		AC_MSG_RESULT([${igzip}])
	AC_LANG_POP
	
	CPPFLAGS="${CPPFLAGS_SAVE}"
	LDFLAGS="${LDFLAGS_SAVE}"
	LIBS="${LIBS_SAVE}"
	
	if test ${igzip} = "yes" ; then
		LIBMAUS2_HAVE_IGZIP="#define LIBMAUS2_HAVE_IGZIP"
		LIBMAUSPKGLIBS="${LIBMAUSPKGLIBS} ${IGZIPLDFLAGS} ${IGZIPLIBS}"
		LIBMAUSPKGCPPFLAGS="${LIBMAUSPKGCPPFLAGS} ${IGZIPCPPFLAGS}"
	else
		IGZIPCPPFLAGS=
		IGZIPLDFLAGS=
		IGZIPLIBS=
		AC_MSG_ERROR([Failed to compile igzip program.]);
	fi
fi

PKG_CHECK_MODULES([zlib],[zlib >= 0],[zlibpkg=yes],[zlibpkg=no])

if [[ "${zlibpkg}" = "yes" ]] ; then
	PKG_CHECK_MODULES([zlib],[zlib >= 0])

        AC_LANG_PUSH([C++])
	LIBS_SAVE="${LIBS}"
	LIBS="${LIBS} ${zlib_LIBS}"
	CPPFLAGSSAVE="${CPPFLAGS}"
	CPPFLAGS="${CPPFLAGS} ${zlib_CFLAGS}"
        AC_MSG_CHECKING([whether we can compile a zlib program])
        AC_TRY_LINK([#include <zlib.h>
#include <cstring>
],[
	z_stream strm;
	memset ( &strm , 0, sizeof(z_stream) );
	strm.zalloc = Z_NULL;
	strm.zfree = Z_NULL;
	strm.opaque = Z_NULL;
	deflateInit(&strm,Z_DEFAULT_COMPRESSION);
	],[zlib=yes],[zlib=no])
        AC_MSG_RESULT([${zlib}])
	LIBS="${LIBS_SAVE}"
	CPPFLAGS="${CPPFLAGSSAVE}"
        AC_LANG_POP

	if [[ "$zlib" = "no" ]] ; then
		AC_MSG_ERROR([Required library zlib not found.]);
	else
		ZLIBREQ=zlib
		ZLIBCPPFLAGS="${zlib_CFLAGS}"
		ZLIBLIBS="${zlib_LIBS}"
	fi
else
	AC_MSG_WARN([zlib pkgconfig file is not installed. Trying if -lz for LIBS is enough.])

        AC_LANG_PUSH([C++])
	LIBS_SAVE="${LIBS}"
	LIBS="${LIBS} -lz"
        AC_MSG_CHECKING([whether we can compile a zlib program])
        AC_TRY_LINK([#include <zlib.h>
#include <cstring>
],[
	z_stream strm;
	memset ( &strm , 0, sizeof(z_stream) );
	strm.zalloc = Z_NULL;
	strm.zfree = Z_NULL;
	strm.opaque = Z_NULL;
	deflateInit(&strm,Z_DEFAULT_COMPRESSION);
	],[zlib=yes],[zlib=no])
        AC_MSG_RESULT([${zlib}])
	LIBS="${LIBS_SAVE}"
        AC_LANG_POP

	if [[ "$zlib" = "no" ]] ; then
		AC_MSG_ERROR([Required library zlib not found.]);
	else
		ZLIBREQ=
		ZLIBCPPFLAGS=
		ZLIBLIBS="-lz"
		LIBMAUSPKGLIBS="${LIBMAUSPKGLIBS} -lz"
	fi
fi

LIBMAUSHAVESNAPPY=
SNAPPYCPPFLAGS=
SNAPPYLDFLAGS=
SNAPPYLIBS=
AC_ARG_WITH([snappy],
            [AS_HELP_STRING([--with-snappy@<:@=PATH@:>@], [support for snappy compression @<:@default=@:>@])],
            [with_snappy=${withval}],
            [with_snappy=])

if [[ "${with_snappy}" != "no" ]] ; then
	LIBS_SAVE="${LIBS}"
	LDFLAGSSAVE="${LDFLAGS}"
	CPPFLAGSSAVE="${CPPFLAGS}"

	if [[ \( ! -z "${with_snappy}" \) -a \( "${with_snappy}" != "yes" \) ]] ; then
		SNAPPYCPPFLAGS="-I${with_snappy}/include"
		SNAPPYLDFLAGS="-L${with_snappy}/lib"
	fi
	
	SNAPPYLIBS="-lsnappy"

	LIBS="${LIBS} ${SNAPPYLIBS}"
	LDFLAGS="${LDFLAGS} ${SNAPPYLDFLAGS}"
	CPPFLAGS="${CPPFLAGS} ${SNAPPYCPPFLAGS}"

	AC_LANG_PUSH([C++])

	AC_CHECK_HEADER(snappy.h, [snappy_h=yes], [snappy_h=no])

	if test "$snappy_h" = "yes" ; then
	AC_MSG_CHECKING([whether we can compile a program using snappy])
	AC_TRY_LINK([#include <snappy.h>
#include <cstring>],[char const * input = "hello snappy";
size_t const input_length = strlen(input);
std::string output;
snappy::Compress(input,input_length,&output);
;],[snappy=yes],[snappy=no])
	AC_MSG_RESULT([${snappy}])
	fi

	AC_LANG_POP

	CPPFLAGS="${CPPFLAGSSAVE}"
	LDFLAGS="${LDFLAGSSAVE}"
	LIBS="${LIBS_SAVE}"

	if [[ "${snappy}" = "yes" ]] ; then
		LIBMAUSHAVESNAPPY="#define LIBMAUS2_HAVE_SNAPPY"
		LIBMAUSPKGLIBS="${LIBMAUSPKGLIBS} ${SNAPPYLDFLAGS} ${SNAPPYLIBS}"
		LIBMAUSPKGCPPFLAGS="${LIBMAUSPKGCPPFLAGS} ${SNAPPYCPPFLAGS}"
	else
		SNAPPYLIBS=
	fi
fi

AC_LANG_PUSH([C++])
AC_HEADER_STDC
AC_LANG_POP

AC_ARG_ENABLE(aio,
        AS_HELP_STRING([--enable-aio],[enable asynchronous I/O classes if available (default yes)]),
        [useaio=${enableval}],[useaio=yes])

AC_LANG_PUSH([C++])
AC_CHECK_HEADER(aio.h, [aio_h=yes], [aio_h=no])
AC_LANG_POP

AC_LANG_PUSH([C++])
AC_CHECK_HEADER(execinfo.h, [execinfo_h=yes], [execinfo_h=no])
AC_LANG_POP

AC_LANG_PUSH([C++])
AC_CHECK_HEADER(windows.h, [windows_h=yes], [windows_h=no])
AC_LANG_POP

AC_LANG_PUSH([C++])
AC_CHECK_HEADER(unistd.h, [unistd_h=yes], [unistd_h=no])
AC_LANG_POP

AC_LANG_PUSH([C++])
AC_CHECK_HEADER(linux/sysctl.h, [linux_sysctl_h=yes], [linux_sysctl_h=no])
AC_LANG_POP


AC_LANG_PUSH([C++])
AC_CHECK_HEADER(features.h, [features_h=yes], [features_h=no])
AC_LANG_POP

AC_LANG_PUSH([C++])
AC_CHECK_HEADER(stdint.h, [stdint_h=yes], [stdint_h=no])
AC_LANG_POP

AC_LANG_PUSH([C++])
AC_CHECK_HEADER(dlfcn.h, [dlfcn_h=yes], [dlfcn_h=no])
AC_LANG_POP

HAVEDLFCNH=
if [[ "${dlfcn_h}" = "yes" ]] ; then 
	HAVEDLFCNH="#define LIBMAUS2_HAVE_DLFCN_H"
fi

DLFUNCS=""
have_dynamic_loading=no
if [[ "${dlfcn_h}" = "yes" ]] ; then 
	AC_LANG_PUSH([C++])
	AC_CHECK_FUNC(dlopen,dlopen_nolib=yes,dlopen_nolib=no)
	AC_CHECK_FUNC(dlerror,dlerror_nolib=yes,dlerror_nolib=no)
	AC_CHECK_FUNC(dlsym,dlsym_nolib=yes,dlsym_nolib=no)
	AC_CHECK_FUNC(dlclose,dlclose_nolib=yes,dlclose_nolib=no)
	AC_LANG_POP

	AC_LANG_PUSH([C++])
	AC_CHECK_LIB([dl],[dlopen],[dlopen_lib_dl=yes],[dlopen_libdl=no])
	AC_CHECK_LIB([dl],[dlerror],[dlerror_lib_dl=yes],[dlerror_libdl=no])
	AC_CHECK_LIB([dl],[dlsym],[dlsym_lib_dl=yes],[dlsym_libdl=no])
	AC_CHECK_LIB([dl],[dlclose],[dlclose_lib_dl=yes],[dlclose_libdl=no])
	AC_LANG_POP	

        AC_MSG_CHECKING([whether we found the dlopen function anywhere])
	if [[ "${dlopen_nolib}" = "yes" -o "${dlopen_lib_dl}" = "yes" ]] ; then
		dlopen_any=yes
	else
		dlopen_any=no
	fi
	AC_MSG_RESULT([$dlopen_any])

        AC_MSG_CHECKING([whether we found the dlerror function anywhere])
	if [[ "${dlerror_nolib}" = "yes" -o "${dlerror_lib_dl}" = "yes" ]] ; then
		dlerror_any=yes
	else
		dlerror_any=no
	fi
	AC_MSG_RESULT([$dlerror_any])

        AC_MSG_CHECKING([whether we found the dlsym function anywhere])
	if [[ "${dlsym_nolib}" = "yes" -o "${dlsym_lib_dl}" = "yes" ]] ; then
		dlsym_any=yes
	else
		dlsym_any=no
	fi
	AC_MSG_RESULT([$dlsym_any])

        AC_MSG_CHECKING([whether we found the dlclose function anywhere])
	if [[ "${dlclose_nolib}" = "yes" -o "${dlclose_lib_dl}" = "yes" ]] ; then
		dlclose_any=yes
	else
		dlclose_any=no
	fi
	AC_MSG_RESULT([$dlclose_any])

        AC_MSG_CHECKING([whether we found all the functions required for dynamic modules somewhere])
	if [[ "${dlopen_any}" = "yes" -a "${dlerror_any}" = "yes" -a "${dlsym_any}" = "yes" -a "${dlclose_any}" = "yes" ]] ; then
		dlall_any=yes
	else
		dlall_any=no
	fi
	AC_MSG_RESULT([$dlall_any])

	if [[ "$dlall_any" = "yes" ]] ; then
	        AC_MSG_CHECKING([whether we need the dl library for any of the dl functions])
		if [[ "${dlopen_nolib}" = "no" -o "${dlerror_nolib}" = "no" -o "${dlsym_nolib}" = "no" -o "${dlclose_nolib}" = "no" ]] ; then
			dlneedlibdl=yes
			DLLIB="-ldl"
			LIBMAUSPKGLIBS="${LIBMAUSPKGLIBS} ${DLLIB}"
		else
			dlneedlibdl=no
			DLLIB=""
		fi
		AC_MSG_RESULT([$dlneedlibdl])

		DLFUNCS="#define LIBMAUS2_HAVE_DL_FUNCS"
		have_dynamic_loading=yes
	fi
	
	# if [[ "${backtrace}" = "yes" ]] ; then
	#	HAVEBACKTRACE="#define LIBMAUS2_HAVE_BACKTRACE"
	# fi
fi

HAVELINUXSYSCTLH=
if test "${linux_sysctl_h}" = "yes" ; then
	HAVELINUXSYSCTLH="#define LIBMAUS2_HAVE_LINUX_SYSCTL_H"
fi

HAVEUNISTDH=
if [[ "${unistd_h}" = "yes" ]] ; then 
	HAVEUNISTDH="#define LIBMAUS2_HAVE_UNISTD_H"
fi

HAVEFEATURESH=
if [[ "${features_h}" = "yes" ]] ; then
        HAVEHAVEFEATURESH="#define LIBMAUS2_HAVE_FEATURES_H"
fi

HAVESTDINTH=
if [[ "${stdint_h}" = "yes" ]] ; then 
	HAVESTDINTH="#define LIBMAUS2_HAVE_STDINT_H"
fi

HAVEAIO=
if [[ \( "${aio_h}" = "yes" \) -a \( "${useaio}" = "yes" \) ]] ; then 
	AC_LANG_PUSH([C++])
	AC_CHECK_LIB([rt],[aio_suspend],[aiolib=yes],[aiolib=no])
	AC_LANG_POP
	
	if [[ "${aiolib}" = "yes" ]] ; then
		HAVEAIO="#define LIBMAUS2_HAVE_AIO"
		LIBMAUSLIBS="${LIBMAUSLIBS} -lrt"
	fi
fi

if [[ "${execinfo_h}" = "yes" ]] ; then 
	AC_LANG_PUSH([C++])
	AC_CHECK_FUNC(backtrace,backtrace=yes,backtrace=no)
	AC_LANG_POP
	
	if [[ "${backtrace}" = "yes" ]] ; then
		HAVEBACKTRACE="#define LIBMAUS2_HAVE_BACKTRACE"
	fi
fi

if [[ "${windows_h}" = "yes" ]] ; then 
	HAVEWINDOWSH="#define LIBMAUS2_HAVE_WINDOWS_H"
fi

HAVEEXECINFO=
if [[ "${execinfo_h}" = "yes" ]] ; then 
	LIBMAUS2_HAVE_EXECINFO_H="#define LIBMAUS2_HAVE_EXECINFO_H"
fi

AC_LANG_PUSH([C++])
AC_CHECK_FUNC(setrlimit,setrlimit=yes,setrlimit=no)
AC_LANG_POP

if [[ "${setrlimit}" = "yes" ]] ; then 
	HAVESETRLIMIT="#define LIBMAUS2_HAVE_SETRLIMIT"
fi

AC_LANG_PUSH([C++])
AC_CHECK_FUNC(fcntl,fcntl_func=yes,fcntl_func=no)
AC_LANG_POP

if [[ "${fcntl_func}" = "yes" ]] ; then
	LIBMAUS2_HAVE_FCNTL="#define LIBMAUS2_HAVE_FCNTL"
fi

LIBMAUSLIBS="${LIBMAUSLIBS} ${ZLIBLIBS}"

AC_LANG_PUSH([C++])
CXXFLAGS_SAVE="${CXXFLAGS}"
CXXFLAGS="-std=gnu++0x"
AC_MSG_CHECKING([whether the C++ compiler supports the -std=gnu++0x flag])
AC_TRY_COMPILE([#include <cstdint>],[],[nullx=yes],[nullx=no])
AC_MSG_RESULT([${nullx}])
CXXFLAGS="${CXXFLAGS_SAVE}"
AC_LANG_POP

AC_LANG_PUSH([C++])
CXXFLAGS_SAVE="${CXXFLAGS}"
CXXFLAGS="-msse4"
AC_MSG_CHECKING([whether the C++ compiler supports the -msse4 flag])
AC_TRY_COMPILE([],[],[msse4=yes],[msse4=no])
AC_MSG_RESULT([${msse4}])
CXXFLAGS="${CXXFLAGS_SAVE}"
AC_LANG_POP

if test "${msse4}" = "yes" ; then
	MSSE4="-msse4"
fi

AC_LANG_PUSH([C++])
CXXFLAGS_SAVE="${CXXFLAGS}"
CXXFLAGS="-msse2"
AC_MSG_CHECKING([whether the C++ compiler supports the -msse2 flag])
AC_TRY_COMPILE([],[],[msse2=yes],[msse2=no])
AC_MSG_RESULT([${msse2}])
CXXFLAGS="${CXXFLAGS_SAVE}"
AC_LANG_POP

MSSE2=
if test "${msse2}" = "yes" ; then
	MSSE2="-msse2"
fi

AC_LANG_PUSH([C++])
CXXFLAGS_SAVE="${CXXFLAGS}"
CXXFLAGS="-mssse3"
AC_MSG_CHECKING([whether the C++ compiler supports the -mssse3 flag])
AC_TRY_COMPILE([],[],[mssse3=yes],[mssse3=no])
AC_MSG_RESULT([${mssse3}])
CXXFLAGS="${CXXFLAGS_SAVE}"
AC_LANG_POP

MSSSE3=
if test "${mssse3}" = "yes" ; then
	MSSSE3="-mssse3"
fi

AC_LANG_PUSH([C++])
CXXFLAGS_SAVE="${CXXFLAGS}"
CXXFLAGS="-msse4.1"
AC_MSG_CHECKING([whether the C++ compiler supports the -msse4.1 flag])
AC_TRY_COMPILE([],[],[msse41=yes],[msse41=no])
AC_MSG_RESULT([${msse41}])
CXXFLAGS="${CXXFLAGS_SAVE}"
AC_LANG_POP

MSSE41=
if test "${msse41}" = "yes" ; then
	MSSE41="-msse4.1"
fi

AC_LANG_PUSH([C++])
CXXFLAGS_SAVE="${CXXFLAGS}"
CXXFLAGS="-mavx"
AC_MSG_CHECKING([whether the C++ compiler supports the -mavx flag])
AC_TRY_COMPILE([],[],[mavx=yes],[mavx=no])
AC_MSG_RESULT([${mavx}])
CXXFLAGS="${CXXFLAGS_SAVE}"
AC_LANG_POP

MAVX=
LIBMAUS2_HAVE_AVX=
if test "${mavx}" = "yes" ; then
	MAVX="-mavx"
	LIBMAUS2_HAVE_AVX="#define LIBMAUS2_HAVE_AVX"
fi

AC_LANG_PUSH([C++])
CXXFLAGS_SAVE="${CXXFLAGS}"
CXXFLAGS="-mavx2"
AC_MSG_CHECKING([whether the C++ compiler supports the -mavx2 flag])
AC_TRY_COMPILE([],[],[mavx2=yes],[mavx2=no])
AC_MSG_RESULT([${mavx2}])
CXXFLAGS="${CXXFLAGS_SAVE}"
AC_LANG_POP

MAVX2=
LIBMAUS2_HAVE_AVX2=
if test "${mavx2}" = "yes" ; then
	MAVX2="-mavx2"
	LIBMAUS2_HAVE_AVX2="#define LIBMAUS2_HAVE_AVX2"
fi

AC_LANG_PUSH([C++])
CXXFLAGS_SAVE=${CXXFLAGS}
CPPFLAGS_SAVE=${CPPFLAGS}
if test "${msse4}" = "yes" ; then
	CXXFLAGS="${CXXFLAGS} -msse4"
	CPPFLAGS="${CPPFLAGS} -msse4"
fi
AC_CHECK_HEADER(smmintrin.h, [smmintrin_h=yes], [smmintrin_h=no])
CXXFLAGS=${CXXFLAGS_SAVE}
CPPFLAGS=${CPPFLAGS_SAVE}
AC_LANG_POP

HAVESMMINTRINH=
if [[ "${smmintrin_h}" = "yes" ]] ; then
	HAVESMMINTRINH="#define LIBMAUS2_HAVE_SMMINTRIN_H"
fi

AC_CHECK_HEADER(immintrin.h, [immintrin_h=yes], [immintrin_h=no])

have_mm_load_si128=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MSSE2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm_load_si128])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t const xmm[sizeof(__m128i)] __attribute__((aligned(sizeof(__m128i)))) = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
__m128i const reg = _mm_load_si128(reinterpret_cast<__m128i const *>(&xmm[0]));],[have_mm_load_si128=yes],[have_mm_load_si128=no])
	AC_MSG_RESULT([${have_mm_load_si128}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm_loadu_si128=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MSSE2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm_loadu_si128])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t const xmm[sizeof(__m128i)] __attribute__((aligned(sizeof(__m128i)))) = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
__m128i const reg = _mm_loadu_si128(reinterpret_cast<__m128i const *>(&xmm[0]));
	],[have_mm_loadu_si128=yes],[have_mm_loadu_si128=no])
	AC_MSG_RESULT([${have_mm_loadu_si128}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi


have_mm_store_si128=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${have_mm_load_si128}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MSSE2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm_store_si128])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t xmm[sizeof(__m128i)] __attribute__((aligned(sizeof(__m128i)))) = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
__m128i const reg = _mm_load_si128(reinterpret_cast<__m128i const *>(&xmm[0]));
_mm_store_si128(reinterpret_cast<__m128i *>(&xmm[0]),reg);
	],[have_mm_store_si128=yes],[have_mm_store_si128=no])
	AC_MSG_RESULT([${have_mm_store_si128}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi


have_mm_andnot_si128=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${have_mm_load_si128}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MSSE2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm_andnot_si128])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t xmm[sizeof(__m128i)] __attribute__((aligned(sizeof(__m128i)))) = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
__m128i reg = _mm_load_si128(reinterpret_cast<__m128i const *>(&xmm[0]));
reg = _mm_andnot_si128(reg,reg);
	],[have_mm_andnot_si128=yes],[have_mm_andnot_si128=no])
	AC_MSG_RESULT([${have_mm_andnot_si128}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

	
have_mm_or_si128=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${have_mm_load_si128}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MSSE2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm_or_si128])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t xmm[sizeof(__m128i)] __attribute__((aligned(sizeof(__m128i)))) = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
__m128i reg = _mm_load_si128(reinterpret_cast<__m128i const *>(&xmm[0]));
reg = _mm_or_si128(reg,reg);
	],[have_mm_or_si128=yes],[have_mm_or_si128=no])
	AC_MSG_RESULT([${have_mm_or_si128}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm_cmpeq_epi8=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${have_mm_load_si128}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MSSE2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm_cmpeq_epi8])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t xmm[sizeof(__m128i)] __attribute__((aligned(sizeof(__m128i)))) = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
__m128i reg = _mm_load_si128(reinterpret_cast<__m128i const *>(&xmm[0]));
reg = _mm_cmpeq_epi8(reg,reg);
	],[have_mm_cmpeq_epi8=yes],[have_mm_cmpeq_epi8=no])
	AC_MSG_RESULT([${have_mm_cmpeq_epi8}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm_adds_epu8=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${have_mm_load_si128}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MSSE2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm_adds_epu8])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t xmm[sizeof(__m128i)] __attribute__((aligned(sizeof(__m128i)))) = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
__m128i reg = _mm_load_si128(reinterpret_cast<__m128i const *>(&xmm[0]));
reg = _mm_adds_epu8(reg,reg);
	],[have_mm_adds_epu8=yes],[have_mm_adds_epu8=no])
	AC_MSG_RESULT([${have_mm_adds_epu8}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm_min_epu8=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${have_mm_load_si128}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MSSE2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm_min_epu8])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t xmm[sizeof(__m128i)] __attribute__((aligned(sizeof(__m128i)))) = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
__m128i reg = _mm_load_si128(reinterpret_cast<__m128i const *>(&xmm[0]));
reg = _mm_min_epu8(reg,reg);
	],[have_mm_min_epu8=yes],[have_mm_min_epu8=no])
	AC_MSG_RESULT([${have_mm_min_epu8}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm_shuffle_epi8=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${have_mm_load_si128}" = "yes" -a "${mssse3}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MSSE2} -mssse3"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm_shuffle_epi8])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t xmm[sizeof(__m128i)] __attribute__((aligned(sizeof(__m128i)))) = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
__m128i reg = _mm_load_si128(reinterpret_cast<__m128i const *>(&xmm[0]));
reg = _mm_shuffle_epi8(reg,reg);
	],[have_mm_shuffle_epi8=yes],[have_mm_shuffle_epi8=no])
	AC_MSG_RESULT([${have_mm_shuffle_epi8}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_X128_8=no
AC_MSG_CHECKING([whether the C++ compiler supports all intrinsics required for SIMD global alignment (X128/8 variant)])
if test \
	"${have_mm_load_si128}" = "yes" -a \
	"${have_mm_loadu_si128}" = "yes" -a \
	"${have_mm_store_si128}" = "yes" -a \
	"${have_mm_andnot_si128}" = "yes" -a \
	"${have_mm_or_si128}" = "yes" -a \
	"${have_mm_cmpeq_epi8}" = "yes" -a \
	"${have_mm_adds_epu8}" = "yes" -a \
	"${have_mm_min_epu8}" = "yes" -a \
	"${have_mm_shuffle_epi8}" = "yes" ; then
	LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_X128_8=yes
fi
AC_MSG_RESULT([${LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_X128_8}])

have_mm_cmpeq_epi16=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${have_mm_load_si128}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MSSE2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm_cmpeq_epi16])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t xmm[sizeof(__m128i)] __attribute__((aligned(sizeof(__m128i)))) = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
__m128i reg = _mm_load_si128(reinterpret_cast<__m128i const *>(&xmm[0]));
reg = _mm_cmpeq_epi16(reg,reg);
	],[have_mm_cmpeq_epi16=yes],[have_mm_cmpeq_epi16=no])
	AC_MSG_RESULT([${have_mm_cmpeq_epi16}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm_adds_epu16=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${have_mm_load_si128}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MSSE2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm_adds_epu16])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t xmm[sizeof(__m128i)] __attribute__((aligned(sizeof(__m128i)))) = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
__m128i reg = _mm_load_si128(reinterpret_cast<__m128i const *>(&xmm[0]));
reg = _mm_adds_epu16(reg,reg);
	],[have_mm_adds_epu16=yes],[have_mm_adds_epu16=no])
	AC_MSG_RESULT([${have_mm_adds_epu16}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm_min_epu16=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${have_mm_load_si128}" = "yes" -a "${msse41}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MSSE2} ${MSSE41}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm_min_epu16])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t xmm[sizeof(__m128i)] __attribute__((aligned(sizeof(__m128i)))) = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
__m128i reg = _mm_load_si128(reinterpret_cast<__m128i const *>(&xmm[0]));
reg = _mm_min_epu16(reg,reg);
	],[have_mm_min_epu16=yes],[have_mm_min_epu16=no])
	AC_MSG_RESULT([${have_mm_min_epu16}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_X128_16=no
AC_MSG_CHECKING([whether the C++ compiler supports all intrinsics required for SIMD global alignment (X128/16 variant)])
if test \
	"${have_mm_load_si128}" = "yes" -a \
	"${have_mm_loadu_si128}" = "yes" -a \
	"${have_mm_store_si128}" = "yes" -a \
	"${have_mm_andnot_si128}" = "yes" -a \
	"${have_mm_or_si128}" = "yes" -a \
	"${have_mm_cmpeq_epi16}" = "yes" -a \
	"${have_mm_adds_epu16}" = "yes" -a \
	"${have_mm_min_epu16}" = "yes" -a \
	"${have_mm_shuffle_epi8}" = "yes" ; then
	LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_X128_16=yes
fi
AC_MSG_RESULT([${LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_X128_16}])

have_mm256_load_si256=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${mavx2}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MAVX2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm256_load_si256])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t const ymm[sizeof(__m256i)] __attribute__((aligned(sizeof(__m256i)))) = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
__m256i const reg = _mm256_load_si256(reinterpret_cast<__m256i const *>(&ymm[0]));],[have_mm256_load_si256=yes],[have_mm256_load_si256=no])
	AC_MSG_RESULT([${have_mm256_load_si256}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm256_loadu_si256=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${mavx2}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MAVX2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm256_loadu_si256])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t const ymm[sizeof(__m256i)] __attribute__((aligned(sizeof(__m256i)))) = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
__m256i const reg = _mm256_loadu_si256(reinterpret_cast<__m256i const *>(&ymm[0]));],[have_mm256_loadu_si256=yes],[have_mm256_loadu_si256=no])
	AC_MSG_RESULT([${have_mm256_loadu_si256}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm256_store_si256=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${mavx2}" = "yes" -a "${have_mm256_load_si256}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MAVX2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm256_store_si256])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t ymm[sizeof(__m256i)] __attribute__((aligned(sizeof(__m256i)))) = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
__m256i const reg = _mm256_load_si256(reinterpret_cast<__m256i const *>(&ymm[0]));
_mm256_store_si256(reinterpret_cast<__m256i *>(&ymm[0]),reg);
],[have_mm256_store_si256=yes],[have_mm256_store_si256=no])
	AC_MSG_RESULT([${have_mm256_store_si256}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm256_andnot_si256=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${mavx2}" = "yes" -a "${have_mm256_load_si256}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MAVX2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm256_andnot_si256])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t ymm[sizeof(__m256i)] __attribute__((aligned(sizeof(__m256i)))) = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
__m256i reg = _mm256_load_si256(reinterpret_cast<__m256i const *>(&ymm[0]));
reg = _mm256_andnot_si256(reg,reg);
],[have_mm256_andnot_si256=yes],[have_mm256_andnot_si256=no])
	AC_MSG_RESULT([${have_mm256_andnot_si256}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm256_or_si256=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${mavx2}" = "yes" -a "${have_mm256_load_si256}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MAVX2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm256_or_si256])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t ymm[sizeof(__m256i)] __attribute__((aligned(sizeof(__m256i)))) = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
__m256i reg = _mm256_load_si256(reinterpret_cast<__m256i const *>(&ymm[0]));
reg = _mm256_or_si256(reg,reg);
],[have_mm256_or_si256=yes],[have_mm256_or_si256=no])
	AC_MSG_RESULT([${have_mm256_or_si256}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm256_cmpeq_epi8=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${mavx2}" = "yes" -a "${have_mm256_load_si256}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MAVX2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm256_cmpeq_epi8])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t ymm[sizeof(__m256i)] __attribute__((aligned(sizeof(__m256i)))) = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
__m256i reg = _mm256_load_si256(reinterpret_cast<__m256i const *>(&ymm[0]));
reg = _mm256_cmpeq_epi8(reg,reg);
],[have_mm256_cmpeq_epi8=yes],[have_mm256_cmpeq_epi8=no])
	AC_MSG_RESULT([${have_mm256_cmpeq_epi8}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm256_adds_epu8=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${mavx2}" = "yes" -a "${have_mm256_load_si256}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MAVX2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm256_adds_epu8])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t ymm[sizeof(__m256i)] __attribute__((aligned(sizeof(__m256i)))) = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
__m256i reg = _mm256_load_si256(reinterpret_cast<__m256i const *>(&ymm[0]));
reg = _mm256_adds_epu8(reg,reg);
],[have_mm256_adds_epu8=yes],[have_mm256_adds_epu8=no])
	AC_MSG_RESULT([${have_mm256_adds_epu8}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm256_shuffle_epi8=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${mavx2}" = "yes" -a "${have_mm256_load_si256}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MAVX2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm256_shuffle_epi8])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t ymm[sizeof(__m256i)] __attribute__((aligned(sizeof(__m256i)))) = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
__m256i reg = _mm256_load_si256(reinterpret_cast<__m256i const *>(&ymm[0]));
reg = _mm256_shuffle_epi8(reg,reg);
],[have_mm256_shuffle_epi8=yes],[have_mm256_shuffle_epi8=no])
	AC_MSG_RESULT([${have_mm256_shuffle_epi8}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm256_min_epu8=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${mavx2}" = "yes" -a "${have_mm256_load_si256}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MAVX2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm256_min_epu8])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t ymm[sizeof(__m256i)] __attribute__((aligned(sizeof(__m256i)))) = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
__m256i reg = _mm256_load_si256(reinterpret_cast<__m256i const *>(&ymm[0]));
reg = _mm256_min_epu8(reg,reg);
],[have_mm256_min_epu8=yes],[have_mm256_min_epu8=no])
	AC_MSG_RESULT([${have_mm256_min_epu8}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm256_permute2f128_si256=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${mavx2}" = "yes" -a "${have_mm256_load_si256}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MAVX2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm256_permute2f128_si256])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t ymm[sizeof(__m256i)] __attribute__((aligned(sizeof(__m256i)))) = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
__m256i reg = _mm256_load_si256(reinterpret_cast<__m256i const *>(&ymm[0]));
reg = _mm256_permute2f128_si256(reg,reg,8);
],[have_mm256_permute2f128_si256=yes],[have_mm256_permute2f128_si256=no])
	AC_MSG_RESULT([${have_mm256_permute2f128_si256}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_Y256_8=no
AC_MSG_CHECKING([whether the C++ compiler supports all intrinsics required for SIMD global alignment (Y256/8 variant)])
if test \
	"${have_mm256_load_si256}" = "yes" -a \
	"${have_mm256_loadu_si256}" = "yes"  -a \
	"${have_mm256_store_si256}" = "yes"  -a \
	"${have_mm256_andnot_si256}" = "yes"  -a \
	"${have_mm256_or_si256}" = "yes"  -a \
	"${have_mm256_cmpeq_epi8}" = "yes"  -a \
	"${have_mm256_adds_epu8}" = "yes"  -a \
	"${have_mm256_shuffle_epi8}" = "yes"  -a \
	"${have_mm256_permute2f128_si256}" = "yes"  -a \
	"${have_mm256_min_epu8}" = "yes"  ; then
	LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_Y256_8=yes
fi
AC_MSG_RESULT([${LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_Y256_8}])

have_mm256_cmpeq_epi16=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${mavx2}" = "yes" -a "${have_mm256_load_si256}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MAVX2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm256_cmpeq_epi16])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t ymm[sizeof(__m256i)] __attribute__((aligned(sizeof(__m256i)))) = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
__m256i reg = _mm256_load_si256(reinterpret_cast<__m256i const *>(&ymm[0]));
reg = _mm256_cmpeq_epi16(reg,reg);
],[have_mm256_cmpeq_epi16=yes],[have_mm256_cmpeq_epi16=no])
	AC_MSG_RESULT([${have_mm256_cmpeq_epi16}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm256_adds_epu16=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${mavx2}" = "yes" -a "${have_mm256_load_si256}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MAVX2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm256_adds_epu16])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t ymm[sizeof(__m256i)] __attribute__((aligned(sizeof(__m256i)))) = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
__m256i reg = _mm256_load_si256(reinterpret_cast<__m256i const *>(&ymm[0]));
reg = _mm256_adds_epu16(reg,reg);
],[have_mm256_adds_epu16=yes],[have_mm256_adds_epu16=no])
	AC_MSG_RESULT([${have_mm256_adds_epu16}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm256_min_epu16=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${mavx2}" = "yes" -a "${have_mm256_load_si256}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MAVX2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm256_min_epu16])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t ymm[sizeof(__m256i)] __attribute__((aligned(sizeof(__m256i)))) = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
__m256i reg = _mm256_load_si256(reinterpret_cast<__m256i const *>(&ymm[0]));
reg = _mm256_min_epu16(reg,reg);
],[have_mm256_min_epu16=yes],[have_mm256_min_epu16=no])
	AC_MSG_RESULT([${have_mm256_min_epu16}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm256_max_epu16=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${mavx2}" = "yes" -a "${have_mm256_load_si256}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MAVX2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm256_max_epu16])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t ymm[sizeof(__m256i)] __attribute__((aligned(sizeof(__m256i)))) = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
__m256i reg = _mm256_load_si256(reinterpret_cast<__m256i const *>(&ymm[0]));
reg = _mm256_max_epu16(reg,reg);
],[have_mm256_max_epu16=yes],[have_mm256_max_epu16=no])
	AC_MSG_RESULT([${have_mm256_max_epu16}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_Y256_16=no
AC_MSG_CHECKING([whether the C++ compiler supports all intrinsics required for SIMD global alignment (Y256/16 variant)])
if test \
	"${have_mm256_load_si256}" = "yes"  -a \
	"${have_mm256_loadu_si256}" = "yes"  -a \
	"${have_mm256_store_si256}" = "yes"  -a \
	"${have_mm256_andnot_si256}" = "yes"  -a \
	"${have_mm256_or_si256}" = "yes"  -a \
	"${have_mm256_cmpeq_epi16}" = "yes"  -a \
	"${have_mm256_adds_epu16}" = "yes"  -a \
	"${have_mm256_shuffle_epi8}" = "yes"  -a \
	"${have_mm256_permute2f128_si256}" = "yes"  -a \
	"${have_mm256_max_epu16}" = "yes"  -a \
	"${have_mm256_min_epu16}" = "yes"  ; then
	LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_Y256_16=yes
fi
AC_MSG_RESULT([${LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_Y256_16}])


have_mm256_and_si256=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${mavx2}" = "yes" -a "${have_mm256_load_si256}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MAVX2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm256_and_si256])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t ymm[sizeof(__m256i)] __attribute__((aligned(sizeof(__m256i)))) = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
__m256i reg = _mm256_load_si256(reinterpret_cast<__m256i const *>(&ymm[0]));
reg = _mm256_and_si256(reg,reg);
],[have_mm256_and_si256=yes],[have_mm256_and_si256=no])
	AC_MSG_RESULT([${have_mm256_and_si256}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm256_i32gather_epi32=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${mavx2}" = "yes" -a "${have_mm256_load_si256}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MAVX2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm256_i32gather_epi32])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t ymm[sizeof(__m256i)] __attribute__((aligned(sizeof(__m256i)))) = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
__m256i reg = _mm256_load_si256(reinterpret_cast<__m256i const *>(&ymm[0]));
int base[16];
reg = _mm256_i32gather_epi32(&base[0],reg,1);
],[have_mm256_i32gather_epi32=yes],[have_mm256_i32gather_epi32=no])
	AC_MSG_RESULT([${have_mm256_i32gather_epi32}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm256_extractf128_si256=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${mavx2}" = "yes" -a "${have_mm256_load_si256}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MAVX2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm256_extractf128_si256])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t ymm[sizeof(__m256i)] __attribute__((aligned(sizeof(__m256i)))) = {
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,
	0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
};
__m256i reg = _mm256_load_si256(reinterpret_cast<__m256i const *>(&ymm[0]));
__m128i reg128 = _mm256_extractf128_si256(reg,0);
],[have_mm256_extractf128_si256=yes],[have_mm256_extractf128_si256=no])
	AC_MSG_RESULT([${have_mm256_extractf128_si256}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm256_set1_epi8=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${mavx2}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MAVX2}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm256_set1_epi8])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
__m256i reg = _mm256_set1_epi8(1);
],[have_mm256_set1_epi8=yes],[have_mm256_set1_epi8=no])
	AC_MSG_RESULT([${have_mm256_set1_epi8}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

have_mm_extract_epi8=no
if test "${msse2}" = "yes" -a "${immintrin_h}" = "yes" -a "${nullx}" = "yes" -a "${have_mm_load_si128}" = "yes" -a "${msse41}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-std=gnu++0x ${MSSE2} ${MSSE41}"
	AC_MSG_CHECKING([whether the C++ compiler supports _mm_extract_epi8])
	AC_TRY_COMPILE([#include <immintrin.h>
#include <cstdint>],[
uint8_t xmm[sizeof(__m128i)] __attribute__((aligned(sizeof(__m128i)))) = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0};
__m128i reg = _mm_load_si128(reinterpret_cast<__m128i const *>(&xmm[0]));
int c = _mm_extract_epi8(reg,0);
	],[have_mm_extract_epi8=yes],[have_mm_extract_epi8=no])
	AC_MSG_RESULT([${have_mm_extract_epi8}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
fi

LIBMAUS2_HAVE_ALIGNMENT_ONE_TO_MANY_AVX2=no
AC_MSG_CHECKING([whether the C++ compiler supports all intrinsics required for one to many global alignment using AVX2])
if test \
	"${have_mm256_load_si256}" = "yes"  -a \
	"${have_mm256_loadu_si256}" = "yes"  -a \
	"${have_mm256_store_si256}" = "yes"  -a \
	"${have_mm256_andnot_si256}" = "yes"  -a \
	"${have_mm256_or_si256}" = "yes"  -a \
	"${have_mm256_cmpeq_epi8}" = "yes"  -a \
	"${have_mm256_adds_epu8}" = "yes"  -a \
	"${have_mm256_shuffle_epi8}" = "yes"  -a \
	"${have_mm256_permute2f128_si256}" = "yes"  -a \
	"${have_mm256_min_epu8}" = "yes" -a \
	"${have_mm256_and_si256}" = "yes" -a \
	"${have_mm256_set1_epi8}" = "yes" -a \
	"${have_mm256_i32gather_epi32}" = "yes" -a \
	"${have_mm256_extractf128_si256}" = "yes" -a \
	"${have_mm_extract_epi8}" = "yes" ; then
	LIBMAUS2_HAVE_ALIGNMENT_ONE_TO_MANY_AVX2=yes
fi
AC_MSG_RESULT([${LIBMAUS2_HAVE_ALIGNMENT_ONE_TO_MANY_AVX2}])

if test "${LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_X128_8}" = "yes" ; then
	LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_X128_8="#define LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_X128_8"
else
	LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_X128_8=
fi
if test "${LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_X128_16}" = "yes" ; then
	LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_X128_16="#define LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_X128_16"
else
	LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_X128_16=
fi
if test "${LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_Y256_8}" = "yes" ; then
	LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_Y256_8="#define LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_Y256_8"
else
	LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_Y256_8=
fi
if test "${LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_Y256_16}" = "yes" ; then
	LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_Y256_16="#define LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_Y256_16"
else
	LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_Y256_16=
fi
if test "${LIBMAUS2_HAVE_ALIGNMENT_ONE_TO_MANY_AVX2}" = "yes" ; then
	LIBMAUS2_HAVE_ALIGNMENT_ONE_TO_MANY_AVX2="#define LIBMAUS2_HAVE_ALIGNMENT_ONE_TO_MANY_AVX2"
else
	LIBMAUS2_HAVE_ALIGNMENT_ONE_TO_MANY_AVX2=
fi

if test "${nullx}" = "yes" ; then
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CPPFLAGS_SAVE="${CPPFLAGS}"
	CXXFLAGS="-std=gnu++0x"
	CPPFLAGS="-std=gnu++0x"
	AC_LANG_PUSH([C++])
	AC_CHECK_HEADER(cstdint, [cstdint=yes], [cstdint=no])
	AC_LANG_POP
	CXXFLAGS="${CXXFLAGS_SAVE}"
	CPPFLAGS="${CPPFLAGS_SAVE}"

	LIBMAUSCXXFLAGS="${LIBMAUSCXXFLAGS} -std=gnu++0x"
	LIBMAUSPKGCXXFLAGS="${LIBMAUSPKGCXXFLAGS} -std=gnu++0x"
fi

AC_LANG_PUSH([C++])
CXXFLAGS_SAVE="${CXXFLAGS}"
CXXFLAGS="-msse4"
AC_MSG_CHECKING([whether the C++ compiler supports the -msse4 flag])
AC_TRY_COMPILE([],[__builtin_popcount(4ul)],[sse4flag=yes],[sse4flag=no])
AC_MSG_RESULT([${sse4flag}])
CXXFLAGS="${CXXFLAGS_SAVE}"
AC_LANG_POP

LIBMAUS2_HAVE_MMAP=
LIBMAUS2_HAVE_MMAP_HUGEPAGES=

AC_LANG_PUSH([C++])
CXXFLAGS_SAVE="${CXXFLAGS}"
AC_MSG_CHECKING([for mmap])
AC_TRY_COMPILE([#include <sys/mman.h>],[void *p = 0; mmap(p,0,0,0,-1,0);],[have_mmap=yes],[have_mmap=no])
AC_MSG_RESULT([${have_mmap}])
CXXFLAGS="${CXXFLAGS_SAVE}"
AC_LANG_POP

if test ${have_mmap} = "yes" ; then
	LIBMAUS2_HAVE_MMAP="#define LIBMAUS2_HAVE_MMAP"

	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	AC_MSG_CHECKING([for mmap flag MAP_HUGETLB])
	AC_TRY_COMPILE([#include <sys/mman.h>],[void *p = 0; mmap(p,0,0,MAP_HUGETLB,-1,0);],[have_mmap_huge=yes],[have_mmap_huge=no])
	AC_MSG_RESULT([${have_mmap_huge}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
	
	if test ${have_mmap_huge} = "yes" ; then
		LIBMAUS2_HAVE_MMAP_HUGEPAGES="#define LIBMAUS2_HAVE_MMAP_HUGEPAGES"
	fi
fi

WARNCPPFLAGS=

# effc++ strict-null-sentinel no-non-template-friend old-style-cast overloaded-virtual sign-promo non-virtual-dtor abi extra

for flag in "" all abi non-virtual-dtor ; do
	AC_LANG_PUSH([C++])
	CPPFLAGS_SAVE="${CPPFLAGS}"
	CPPFLAGS="-W${flag}"
	AC_MSG_CHECKING([whether the C++ compiler supports the -W${flag} flag])
	AC_TRY_COMPILE([],[int c = 0;],[wflag=yes],[wflag=no])
	AC_MSG_RESULT([${wflag}])
	CPPFLAGS="${CPPFLAGS_SAVE}"
	AC_LANG_POP

	if test "${wflag}" = "yes" ; then
		WARNCPPFLAGS="${WARNCPPFLAGS} -W${flag}"
	fi
done

if test "${CXX}" = "cl.exe" ; then
	CXXFLAGS="${CXXFLAGS} -EHsc -Gr"
	CPPFLAGS="${CPPFLAGS} -W1" # -Wall
fi

AC_ARG_ENABLE(optimization,
        AS_HELP_STRING([--enable-optimization],[use compiler optimization (default yes)]),
        [optimization=${enableval}],[optimization=yes])
AC_ARG_ENABLE(debug,
        AS_HELP_STRING([--enable-debug],[use compiler debug flags (default no)]),
        [debug=${enableval}],[debug=no])
AC_ARG_ENABLE(werror,
        AS_HELP_STRING([--enable-werror],[treat compiler warnings as errors (default no)]),
        [werror=${enableval}],[werror=no])
AC_ARG_ENABLE(profile,
        AS_HELP_STRING([--enable-profile],[use compiler profiling flags (default no)]),
        [profile=${enableval}],[profile=no])
AC_ARG_ENABLE(fast,
        AS_HELP_STRING([--enable-fast],[disable evaluation of assertions (default no)]),
        [fast=${enableval}],[fast=no])
AC_ARG_ENABLE(sse4,
        AS_HELP_STRING([--enable-sse4],[enable sse4 operations (default no)]),
        [sse4=${enableval}],[sse4=no])
AC_ARG_ENABLE(ssse3,
        AS_HELP_STRING([--enable-ssse3],[enable ssse3 operations (default no)]),
        [ssse3=${enableval}],[ssse3=no])
AC_ARG_ENABLE(asm,
        AS_HELP_STRING([--enable-asm],[use inline assembly code (default yes)]),
        [assembly=${enableval}],[assembly=yes])
AC_ARG_ENABLE(shared-libmaus2,
        AS_HELP_STRING([--enable-shared-libmaus2],[enable compiling shared libmaus2.so]),
        [sharedlibmaus2=${enableval}],[sharedlibmaus2=yes])
AC_ARG_ENABLE(autoarraytrace,
        AS_HELP_STRING([--enable-autoarraytrace],[store traces of allocation through AutoArray (default no)]),
        [autoarraytrace=${enableval}],[autoarraytrace=no])

LIBMAUS2_AUTOARRAY_AUTOARRAYTRACE=
if test "${autoarraytrace}" = "yes" ; then
	LIBMAUS2_AUTOARRAY_AUTOARRAYTRACE="#define LIBMAUS2_AUTOARRAY_AUTOARRAYTRACE 7"
fi

LIBMAUSSTATIC=
if test "${sharedlibmaus2}" = "no" ; then
	LIBMAUSSTATIC="-static"
fi

if test "${fast}" = "yes" ; then
	CPPFLAGS="${CPPFLAGS} -DNDEBUG"
fi

if test "${werror}" = "yes" ; then
	CXXFLAGS="${CXXFLAGS} -Werror"
	CFLAGS="${CFLAGS} -Werror"
fi

AC_ARG_ENABLE(openmp,
        AS_HELP_STRING([--enable-openmp],[use OpenMP (default yes)]),
        [openmp=${enableval}],[openmp=yes])

AC_ARG_ENABLE(asan,
        AS_HELP_STRING([--enable-asan],[enable address sanitizer in debug mode (default no)]),
        [enableasan=${enableval}],[enableasan=no])

if test "${openmp}" = "yes" ; then
	AC_LANG_PUSH([C++])
	AX_OPENMP(have_openmp=yes,have_openmp=no)
	AC_LANG_POP
fi

LIBMAUS2_DEBUG_COMPILED=
if test "${debug}" = "yes" ; then
        CXXFLAGS="${CXXFLAGS} -g -O0"
        CFLAGS="${CFLAGS} -g -O0"
        LDFLAGS="${LDFLAGS} -rdynamic"
	openmp="no"
	LIBMAUS2_DEBUG_COMPILED="#define LIBMAUS2_DEBUG_COMPILED"

	if test "${enableasan}" = "yes" ; then
		AC_LANG_PUSH([C++])
		CXXFLAGS_SAVE="${CXXFLAGS}"
		CXXFLAGS="-fsanitize=address"
		AC_MSG_CHECKING([whether the C++ compiler supports the -fsanitize=address flag])
		AC_TRY_COMPILE([],[],[sanitizeaddress=yes],[sanitizeaddress=no])
		AC_MSG_RESULT([${sanitizeaddress}])
		CXXFLAGS="${CXXFLAGS_SAVE}"
		AC_LANG_POP

		if test "${sanitizeaddress}" = "yes" ; then
			CXXFLAGS="${CXXFLAGS} -fsanitize=address"
			CFLAGS="${CFLAGS} -fsanitize=address"
		fi
	fi

	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-fstack-protector"
	AC_MSG_CHECKING([whether the C++ compiler supports the -fstack-protector flag])
	AC_TRY_COMPILE([],[],[stackprotect=yes],[stackprotect=no])
	AC_MSG_RESULT([${stackprotect}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP

	if test "${stackprotect}" = "yes" ; then
		STACKPROTECT="-fstack-protector"
		CXXFLAGS="${CXXFLAGS} ${STACKPROTECT}"
		CFLAGS="${CFLAGS} ${STACKPROTECT}"
	fi
elif test "${optimization}" = "yes" ; then
	case ${CXX} in
		g++)
			CXXFLAGS="${CXXFLAGS} -O3"
			CFLAGS="${CFLAGS} -O3"
			LDFLAGS="${LDFLAGS} -rdynamic"
			;;
		*-mingw32msvc-g++)
			CXXFLAGS="${CXXFLAGS} -O3"
			CFLAGS="${CFLAGS} -O3"
			LDFLAGS="${LDFLAGS} -rdynamic"
			;;
		cl.exe)
			CXXFLAGS="${CXXFLAGS} -O2 -Ob2 -Ot -Oy"
			;;
	esac
fi

if test "${profile}" = "yes" ; then
	CXXFLAGS="${CXXFLAGS} -g -pg"
	CFLAGS="${CFLAGS} -g -pg"
fi

AC_LANG_PUSH([C++])
CPPFLAGS_SAVE="${CPPFLAGS}"
CPPFLAGS="${CPPFLAGS}"
if test "${nullx}" = "yes" ; then
	CPPFLAGS="${CPPFLAGS} -std=gnu++0x"
fi
LIBS_SAVE="${LIBS}"
LIBS="${LIBS}"

AC_MSG_CHECKING([whether std::unique_ptr exists])
                AC_LINK_IFELSE([AC_LANG_SOURCE([#include <memory>

        int main() {
                std::unique_ptr<int> U;
                return 0;
        }])],
                have_std_unique_ptr=yes,
                have_std_unique_ptr=no
        )
AC_MSG_RESULT($have_std_unique_ptr)
CPPFLAGS="${CPPFLAGS_SAVE}"
LIBS="${LIBS_SAVE}"
AC_LANG_POP

AC_LANG_PUSH([C++])
CPPFLAGS_SAVE="${CPPFLAGS}"
CPPFLAGS="${CPPFLAGS}"
if test "${nullx}" = "yes" ; then
	CPPFLAGS="${CPPFLAGS} -std=gnu++0x"
fi
LIBS_SAVE="${LIBS}"
LIBS="${LIBS}"

AC_MSG_CHECKING([whether std::shared_ptr exists])
                AC_LINK_IFELSE([AC_LANG_SOURCE([#include <memory>

        int main() {
                std::shared_ptr<int> U;
                return 0;
        }])],
                have_std_shared_ptr=yes,
                have_std_shared_ptr=no
        )
AC_MSG_RESULT($have_std_shared_ptr)
CPPFLAGS="${CPPFLAGS_SAVE}"
LIBS="${LIBS_SAVE}"
AC_LANG_POP

AC_LANG_PUSH([C++])
AC_CHECK_HEADER(boost/interprocess/smart_ptr/unique_ptr.hpp,[have_boost_unique_include=yes],[have_boost_unique_input=no])
AC_LANG_POP

if test "${have_boost_unique_include}" = "yes" ; then
    AC_LANG_PUSH([C++])
    CPPFLAGS_SAVE="${CPPFLAGS}"
    LIBS_SAVE="${LIBS}"
    AC_MSG_CHECKING([whether boost::interprocess::unique_ptr exists])
                    AC_LINK_IFELSE([AC_LANG_SOURCE([#include <boost/interprocess/smart_ptr/unique_ptr.hpp>

            template<typename T>
	    struct Delete
            {
		void operator()(T * t) const
		{
			delete t;
		}
            };

            int main() {
                    boost::interprocess::unique_ptr<int, Delete<int> > U;
                    return 0;
            }])],
                    have_boost_unique_ptr=yes,
                    have_boost_unique_ptr=no
            )
    AC_MSG_RESULT($have_boost_unique_ptr)
    CPPFLAGS="${CPPFLAGS_SAVE}"
    LIBS="${LIBS_SAVE}"
    AC_LANG_POP
else
    have_boost_unique_ptr=no
    # AC_MSG_ERROR([Required header boost/interprocess/smart_ptr/unique_ptr.hpp not found])
fi

UNIQUEPTR=

if test "${have_std_unique_ptr}" = "yes" ; then
	UNIQUEPTR="#define LIBMAUS2_USE_STD_UNIQUE_PTR"
elif test "${have_boost_unique_ptr}" = "yes" ; then
	UNIQUEPTR="#define LIBMAUS2_USE_BOOST_UNIQUE_PTR"
else
	AC_MSG_ERROR([Required unique_ptr class not found (not in standard and not in boost)])
fi

AC_LANG_PUSH([C++])
AC_CHECK_HEADER(boost/shared_ptr.hpp,[have_boost_shared_include=yes],[have_boost_shared_input=no])
AC_LANG_POP

if test "${have_boost_shared_include}" = "yes" ; then
    AC_LANG_PUSH([C++])
    CPPFLAGS_SAVE="${CPPFLAGS}"
    LIBS_SAVE="${LIBS}"
    AC_MSG_CHECKING([whether boost::shared_ptr exists])
                    AC_LINK_IFELSE([AC_LANG_SOURCE([#include <boost/shared_ptr.hpp>

            int main() {
		    boost::shared_ptr<int> U;
                    return 0;
            }])],
                    have_boost_shared_ptr=yes,
                    have_boost_shared_ptr=no
            )
    AC_MSG_RESULT($have_boost_shared_ptr)
    CPPFLAGS="${CPPFLAGS_SAVE}"
    LIBS="${LIBS_SAVE}"
    AC_LANG_POP
else
    have_boost_shared_ptr=no
fi

if test "${have_std_shared_ptr}" = "yes" ; then
	SHAREDPTR="#define LIBMAUS2_USE_STD_SHARED_PTR"
elif test "${have_boost_shared_ptr}" = "yes" ; then
	SHAREDPTR="#define LIBMAUS2_USE_BOOST_SHARED_PTR"
else
	AC_MSG_ERROR([Required shared_ptr class not found (not in standard and not in boost)])
fi

AC_LANG_PUSH([C++])
CPPFLAGS_SAVE="${CPPFLAGS}"
CPPFLAGS="${CPPFLAGS}"
if test "${nullx}" = "yes" ; then
	CPPFLAGS="${CPPFLAGS} -std=gnu++0x"
fi
LIBS_SAVE="${LIBS}"
LIBS="${LIBS}"

AC_MSG_CHECKING([whether std::unordered_map exists])
                AC_LINK_IFELSE([AC_LANG_SOURCE([#include <unordered_map>

        int main() {
                std::unordered_map<int,int> U;
                return 0;
        }])],
                have_std_unordered_map=yes,
                have_std_unordered_map=no
        )
AC_MSG_RESULT($have_std_unordered_map)
CPPFLAGS="${CPPFLAGS_SAVE}"
LIBS="${LIBS_SAVE}"
AC_LANG_POP

AC_LANG_PUSH([C++])
CPPFLAGS_SAVE="${CPPFLAGS}"
CPPFLAGS="${CPPFLAGS}"
if test "${nullx}" = "yes" ; then
	CPPFLAGS="${CPPFLAGS} -std=gnu++0x"
fi
LIBS_SAVE="${LIBS}"
LIBS="${LIBS}"

AC_MSG_CHECKING([whether std::unordered_set exists])
                AC_LINK_IFELSE([AC_LANG_SOURCE([#include <unordered_set>

        int main() {
                std::unordered_set<int> U;
                return 0;
        }])],
                have_std_unordered_set=yes,
                have_std_unordered_set=no
        )
AC_MSG_RESULT($have_std_unordered_set)
CPPFLAGS="${CPPFLAGS_SAVE}"
LIBS="${LIBS_SAVE}"
AC_LANG_POP

AC_LANG_PUSH([C++])
AC_CHECK_HEADER(boost/unordered_map.hpp,[have_boost_unordered_map=yes],[have_boost_unordered_map=no])
AC_LANG_POP

if test "${have_boost_unordered_map}" = "yes" ; then
    AC_LANG_PUSH([C++])
    CPPFLAGS_SAVE="${CPPFLAGS}"
    LIBS_SAVE="${LIBS}"
    AC_MSG_CHECKING([whether boost::unordered_map exists])
                    AC_LINK_IFELSE([AC_LANG_SOURCE([#include <boost/unordered_map.hpp>

            int main() {
		    boost::unordered_map<int,int> U;
                    return 0;
            }])],
                    have_boost_unordered_map=yes,
                    have_boost_unordered_map=no
            )
    AC_MSG_RESULT($have_boost_unordered_map)
    CPPFLAGS="${CPPFLAGS_SAVE}"
    LIBS="${LIBS_SAVE}"
    AC_LANG_POP
else
    have_boost_unordered_map=no
fi

AC_LANG_PUSH([C++])
AC_CHECK_HEADER(boost/unordered_set.hpp,[have_boost_unordered_set=yes],[have_boost_unordered_set=no])
AC_LANG_POP

if test "${have_boost_unordered_set}" = "yes" ; then
    AC_LANG_PUSH([C++])
    CPPFLAGS_SAVE="${CPPFLAGS}"
    LIBS_SAVE="${LIBS}"
    AC_MSG_CHECKING([whether boost::unordered_set exists])
                    AC_LINK_IFELSE([AC_LANG_SOURCE([#include <boost/unordered_set.hpp>

            int main() {
		    boost::unordered_set<int> U;
                    return 0;
            }])],
                    have_boost_unordered_set=yes,
                    have_boost_unordered_set=no
            )
    AC_MSG_RESULT($have_boost_unordered_set)
    CPPFLAGS="${CPPFLAGS_SAVE}"
    LIBS="${LIBS_SAVE}"
    AC_LANG_POP
else
    have_boost_unordered_set=no
fi


if test "${have_std_unordered_set}" = "yes" ; then
	UNORDEREDSET="#define LIBMAUS2_USE_STD_UNORDERED_SET"
elif test "${have_boost_unordered_set}" = "yes" ; then
	UNORDEREDSET="#define LIBMAUS2_USE_BOOST_UNORDERED_SET"
else
	AC_MSG_ERROR([Required unordered_set class not found (not in standard and not in boost)])
fi

if test "${have_std_unordered_map}" = "yes" ; then
	UNORDEREDMAP="#define LIBMAUS2_USE_STD_UNORDERED_MAP"
elif test "${have_boost_unordered_map}" = "yes" ; then
	UNORDEREDMAP="#define LIBMAUS2_USE_BOOST_UNORDERED_MAP"
else
	AC_MSG_ERROR([Required unordered_map class not found (not in standard and not in boost)])
fi

AC_LANG_PUSH([C++])
CPPFLAGS_SAVE="${CPPFLAGS}"
CPPFLAGS="${CPPFLAGS}"
if test "${nullx}" = "yes" ; then
	CPPFLAGS="${CPPFLAGS} -std=gnu++0x"
fi
LIBS_SAVE="${LIBS}"
LIBS="${LIBS}"

AC_MSG_CHECKING([whether std::move exists])
                AC_LINK_IFELSE([AC_LANG_SOURCE([#include <tuple>

        int main() {
		std::move(0);
                return 0;
        }])],
                have_std_move=yes,
                have_std_move=no
        )
AC_MSG_RESULT($have_std_move)
CPPFLAGS="${CPPFLAGS_SAVE}"
LIBS="${LIBS_SAVE}"
AC_LANG_POP

AC_LANG_PUSH([C++])
CPPFLAGS_SAVE="${CPPFLAGS}"
CPPFLAGS="${CPPFLAGS}"
if test "${nullx}" = "yes" ; then
	CPPFLAGS="${CPPFLAGS} -std=gnu++0x"
fi
LIBS_SAVE="${LIBS}"
LIBS="${LIBS}"

AC_MSG_CHECKING([whether boost::move exists])
                AC_LINK_IFELSE([AC_LANG_SOURCE([#include <boost/interprocess/smart_ptr/unique_ptr.hpp>
#include <boost/move/move.hpp>

            template<typename T>
	    struct Delete
            {
		void operator()(T * t) const
		{
			delete t;
		}
            };

            int main() {
                    boost::interprocess::unique_ptr<int, Delete<int> > U(new int);
                    boost::interprocess::unique_ptr<int, Delete<int> > V = ::boost::move(U);
                    return 0;
            }])],
                have_boost_move=yes,
                have_boost_move=no
        )
AC_MSG_RESULT($have_boost_move)
CPPFLAGS="${CPPFLAGS_SAVE}"
LIBS="${LIBS_SAVE}"
AC_LANG_POP

if test "${have_std_move}" = "yes" ; then
	MOVEFUNC="#define LIBMAUS2_USE_STD_MOVE"
elif test "${have_boost_move}" = "yes" ; then
	MOVEFUNC="#define LIBMAUS2_USE_BOOST_MOVE"
else
	AC_MSG_ERROR([Required move function for unique_ptr not found (not in standard and not in boost)])
fi

AC_LANG_PUSH([C++])
AC_CHECK_HEADER(sys/types.h, [sys_types=yes], [sys_types=no])
AC_CHECK_HEADER(sys/vfs.h, [sys_vfs_h=yes], [sys_vfs_h=no])
AC_CHECK_HEADER(windows.h, [windows_h=yes], [windows_h=no])
AC_CHECK_HEADER(sys/time.h, [sys_time_h=yes], [sys_time_h=no])
AC_CHECK_HEADER(regex.h, [regex_h=yes], [regex_h=no])
AC_LANG_POP

AC_C_BIGENDIAN
if test "x$ac_cv_c_bigendian" = "xyes"; then
	ENDIANESS="#define LIBMAUS2_BYTE_ORDER_BIG_ENDIAN"
else
	ENDIANESS="#define LIBMAUS2_BYTE_ORDER_LITTLE_ENDIAN"
fi

if [[ "${sys_types}" = "yes" ]] ; then 
	SYS_TYPES_H="#define LIBMAUS2_HAVE_SYS_TYPES_H"
else
	SYS_TYPES_H=
fi
if [[ "${sys_vfs_h}" = "yes" ]] ; then 
	HAVESYSVFSH="#define LIBMAUS2_HAVE_SYS_VFS_H"
else
	HAVESYSVFSH=
fi
if [[ "${cstdint}" = "yes" ]] ; then 
	CSTDINT="#define LIBMAUS2_HAVE_CSTDINT"
else
	CSTDINT=
fi
if [[ "${windows_h}" = "yes" ]] ; then 
	WINDOWSH="#define LIBMAUS2_HAVE_WINDOWS_H"
else
	WINDOWSH=
fi
if [[ "${sys_time_h}" = "yes" ]] ; then 
	SYSTIMEH="#define LIBMAUS2_HAVE_SYS_TIME_H"
else
	SYSTIMEH=
fi

if [[ "${regex_h}" = "yes" ]] ; then 

AC_MSG_CHECKING([whether we can compile a program using posix regex])
                AC_LINK_IFELSE([AC_LANG_SOURCE([#include <sys/types.h>
#include <regex.h>
#include <string.h>

            int main() {
		regex_t preg;
		regcomp(&preg,"hello",REG_EXTENDED);

		regmatch_t pmatch[[1]];
		memset(&pmatch,0,sizeof(pmatch));
		regexec(&preg,"test hello world hello world", sizeof(pmatch)/sizeof(pmatch[[0]]), &pmatch[[0]], 0);

		regfree(&preg);
		return 0;
            }])],
                have_posix_regex=yes,
                have_posix_regex=no
        )
AC_MSG_RESULT([$have_posix_regex])

	if test "${have_posix_regex}" = "yes" ; then
		REGEXH="#define LIBMAUS2_HAVE_REGEX_H"
	else
		REGEXH=""
	fi
else
	REGEXH=
fi

if [[ "${sys_vfs_h}" = "yes" ]] ; then 
	AC_MSG_CHECKING([whether we can compile a program using statfs])
                AC_LINK_IFELSE([AC_LANG_SOURCE([#include <sys/vfs.h>

            int main() {
		struct statfs stfs;
		statfs("file",&stfs);
		return 0;
            }])],
                have_statfs=yes,
                have_statfs=no
        )
AC_MSG_RESULT([$have_statfs])

	if test "${have_statfs}" = "yes" ; then
		LIBMAUS2_HAVE_STATFS="#define LIBMAUS2_HAVE_STATFS"
	else
		LIBMAUS2_HAVE_STATFS=""
	fi
else
	LIBMAUS2_HAVE_STATFS=
fi

if test "${have_statfs}" = "yes" ; then
	AC_MSG_CHECKING([whether struct statfs has field f_iosize])
                AC_LINK_IFELSE([AC_LANG_SOURCE([#include <sys/vfs.h>

            int main() {
		struct statfs stfs;
		int iosize;
		statfs("file",&stfs);
		iosize = stfs.f_iosize;
		return 0;
            }])],
                have_statfs_f_iosize=yes,
                have_statfs_f_iosize=no
        )
AC_MSG_RESULT([$have_statfs_f_iosize])

	if test "${have_statfs_f_iosize}" = "yes" ; then
		LIBMAUS2_HAVE_STATFS_F_IOSIZE="#define LIBMAUS2_HAVE_STATFS_F_IOSIZE"
	else
		LIBMAUS2_HAVE_STATFS_F_IOSIZE=""
	fi
else
	LIBMAUS2_HAVE_STATFS_F_IOSIZE=
fi

if test "${have_statfs}" = "yes" ; then
	AC_MSG_CHECKING([whether struct statfs has field f_bsize])
                AC_LINK_IFELSE([AC_LANG_SOURCE([#include <sys/vfs.h>

            int main() {
		struct statfs stfs;
		int bsize;
		statfs("file",&stfs);
		bsize = stfs.f_bsize;
		return 0;
            }])],
                have_statfs_f_bsize=yes,
                have_statfs_f_bsize=no
        )
AC_MSG_RESULT([$have_statfs_f_bsize])

	if test "${have_statfs_f_bsize}" = "yes" ; then
		LIBMAUS2_HAVE_STATFS_F_BSIZE="#define LIBMAUS2_HAVE_STATFS_F_BSIZE"
	else
		LIBMAUS2_HAVE_STATFS_F_BSIZE=""
	fi
else
	LIBMAUS2_HAVE_STATFS_F_BSIZE=
fi

HAVESSE4=

if test "${sse4}" = "yes" ; then
	HAVESSE4="#define HAVE_SSE4"

	if test "${sse4flag}" = "yes" ; then
		LIBMAUSCXXFLAGS="${LIBMAUSCXXFLAGS} -msse4"
		LIBMAUSCFLAGS="${LIBMAUSCFLAGS} -msse4"
		LIBMAUSCPPFLAGS="${LIBMAUSCPPFLAGS}"
		PKGSSE4="${MSSE4}"
	fi
fi

if test "${ssse3}" = "yes" ; then
	HAVESSSE3="#define LIBMAUS2_HAVE_SSSE3"
fi

if test "${assembly}" = "yes" ; then
	USEASSEMBLY="#define LIBMAUS2_USE_ASSEMBLY"
fi

AC_LANG_PUSH([C++])
CXXFLAGS_SAVE="${CXXFLAGS}"
CXXFLAGS="-pthread"
AC_MSG_CHECKING([whether the C++ compiler supports the -pthread flag])
AC_TRY_COMPILE([#include <pthread.h>
pthread_mutex_t fastmutex = PTHREAD_MUTEX_INITIALIZER;],[
	pthread_mutex_lock(&fastmutex);
	pthread_mutex_unlock(&fastmutex);
],[pthread=yes],[pthread=no])
AC_MSG_RESULT([${pthread}])
CXXFLAGS="${CXXFLAGS_SAVE}"
AC_LANG_POP

POSIXSPINLOCKS=
if test "${pthread}" = "yes" ; then
	AC_LANG_PUSH([C++])
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="-pthread"
	AC_MSG_CHECKING([for pthread spin lock support])
	AC_TRY_COMPILE([#include <pthread.h>],[pthread_spinlock_t spinlock;
		pthread_spin_init(&spinlock,0);
		pthread_spin_lock(&spinlock);
		pthread_spin_unlock(&spinlock);
		pthread_spin_destroy(&spinlock);
	],[pthreadspinlocks=yes],[pthreadspinlocks=no])
	AC_MSG_RESULT([${pthreadspinlocks}])
	CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP

	if test "${pthreadspinlocks}" = "yes" ; then
		POSIXSPINLOCKS="#define LIBMAUS2_HAVE_POSIX_SPINLOCKS"
	fi
fi

if test "${pthread}" = "yes" ; then
	CXXFLAGS_SAVE="${CXXFLAGS}"
	CXXFLAGS="${CXXFLAGS} -pthread"

	AC_LANG_PUSH([C++])
	AC_CHECK_FUNC(sem_post,sem_post=yes,sem_post=no)
	AC_LANG_POP

	AC_LANG_PUSH([C++])
	AC_CHECK_FUNC(sem_wait,sem_wait=yes,sem_wait=no)
	AC_LANG_POP

	AC_LANG_PUSH([C++])
	AC_CHECK_FUNC(sem_init,sem_init=yes,sem_init=no)
	AC_LANG_POP

	AC_LANG_PUSH([C++])
	AC_CHECK_FUNC(sem_destroy,sem_destroy=yes,sem_destroy=no)
	AC_LANG_POP

	AC_LANG_PUSH([C++])
	AC_CHECK_FUNC(sem_timedwait,sem_timedwait=yes,sem_timedwait=no)
	AC_LANG_POP

	AC_LANG_PUSH([C++])
	AC_CHECK_FUNC(pthread_setname_np,pthread_setname_np_func=yes,pthread_setname_np_func=no)
	AC_CHECK_FUNC(pthread_set_name_np,pthread_set_name_np_func=yes,pthread_set_name_np_func=no)
	AC_CHECK_FUNC(pthread_getname_np,pthread_getname_np_func=yes,pthread_getname_np_func=no)
	AC_CHECK_FUNC(pthread_get_name_np,pthread_get_name_np_func=yes,pthread_get_name_np_func=no)
	AC_CHECK_FUNC(pthread_setaffinity_np,pthread_setaffinity_np_func=yes,pthread_setaffinity_np_func=no)
	AC_CHECK_FUNC(pthread_attr_setaffinity_np,pthread_attr_setaffinity_np_func=yes,pthread_attr_setaffinity_np_func=no)
	AC_CHECK_FUNC(prctl,prctl_func=yes,prctl_func=no)
	AC_LANG_POP
	
	if test "${ac_cv_func_pthread_setaffinity_np}" = "yes" ; then
		AC_LANG_PUSH([C++])
		CXXFLAGS_SAVE="${CXXFLAGS}"
		CXXFLAGS="-pthread"
		AC_MSG_CHECKING([for pthread_setaffinity_np support])
		AC_TRY_COMPILE([#include <pthread.h>],[
#if defined(__FreeBSD__) || defined(__NetBSD__)
typedef cpuset_t cpu_set_t;
#endif                                                                        
cpu_set_t cpuset;
pthread_t thread;
CPU_ZERO(&cpuset);
CPU_SET(0,&cpuset);
pthread_setaffinity_np(thread, sizeof(cpu_set_t), &cpuset);
		],[ac_cv_func_pthread_setaffinity_np=yes],[ac_cv_func_pthread_setaffinity_np=no])
		AC_MSG_RESULT([${ac_cv_pthread_setname_np_func}])
		CXXFLAGS="${CXXFLAGS_SAVE}"
	AC_LANG_POP
		
	fi

	CXXFLAGS="${CXXFLAGS_SAVE}"
fi

HAVESEMPOST=
if [[ "${ac_cv_func_sem_post}" = "yes" ]] ; then
	HAVESEMPOST="#define HAVE_SEM_POST"
else
	pthread="no"
fi

HAVESEMWAIT=
if [[ "${ac_cv_func_sem_wait}" = "yes" ]] ; then
	HAVESEMWAIT="#define LIBMAUS2_HAVE_SEM_WAIT"
else
	pthread="no"
fi

HAVESEMINIT=
if [[ "${ac_cv_func_sem_init}" = "yes" ]] ; then
	HAVESEMINIT="#define LIBMAUS2_HAVE_SEM_INIT"
else
	pthread="no"
fi

HAVESEMDESTROY=
if [[ "${ac_cv_func_sem_destroy}" = "yes" ]] ; then
	HAVESEMDESTROY="#define LIBMAUS2_HAVE_SEM_DESTROY"
else
	pthread="no"
fi

HAVESEMTIMEDWWAIT=
if [[ "${ac_cv_func_sem_timedwait}" = "yes" ]] ; then
	HAVESEMTIMEDWAIT="#define LIBMAUS2_HAVE_SEM_TIMEDWAIT"
fi

HAVEPTHREADSETNAME_NP=
if [[ "${ac_cv_func_pthread_setname_np}" = "yes" ]] ; then
	HAVEPTHREADSETNAME_NP="#define LIBMAUS2_HAVE_HAVEPTHREADSETNAME_NP"
fi

HAVEPTHREADSET_NAME_NP=
if [[ "${ac_cv_func_pthread_set_name_np}" = "yes" ]] ; then
	HAVEPTHREADSET_NAME_NP="#define LIBMAUS2_HAVE_HAVEPTHREADSET_NAME_NP"
fi

HAVEPTHREADGETNAME_NP=
if [[ "${ac_cv_func_pthread_getname_np}" = "yes" ]] ; then
	HAVEPTHREADGETNAME_NP="#define LIBMAUS2_HAVE_HAVEPTHREADGETNAME_NP"
fi

HAVEPTHREADGET_NAME_NP=
if [[ "${ac_cv_func_pthread_get_name_np}" = "yes" ]] ; then
	HAVEPTHREADGET_NAME_NP="#define LIBMAUS2_HAVE_HAVEPTHREADGET_NAME_NP"
fi

HAVEPRCTL=
if [[ "${ac_cv_func_prctl}" = "yes" ]] ; then
	HAVEPRCTL="#define LIBMAUS2_HAVE_PRCTL"
fi

HAVEPTHREADSETAFFINITYNP=
if [[ "${ac_cv_func_pthread_setaffinity_np}" = "yes" ]] ; then
	HAVEPTHREADSETAFFINITYNP="#define LIBMAUS2_HAVE_PTHREAD_SETAFFINITY_NP"
fi

HAVEPTHREADATTRSETAFFINITYNP=
if test "${ac_cv_func_pthread_attr_setaffinity_np}" = "yes" ; then
	HAVEPTHREADATTRSETAFFINITYNP="#define LIBMAUS2_HAVE_PTHREAD_ATTR_SETAFFINITY_NP"
fi

HAVEPTHREADS=
if test "${pthread}" = "yes" ; then
	LIBMAUSCXXFLAGS="${LIBMAUSCXXFLAGS} -pthread"
	LIBMAUSCFLAGS="${LIBMAUSCFLAGS} -pthread"
	LIBMAUSCPPFLAGS="${LIBMAUSCPPFLAGS}"
	HAVEPTHREADS="#define LIBMAUS2_HAVE_PTHREADS"

	if [[ "${have_openmp}" = "yes" ]] ; then
		LIBMAUSPKGCPPFLAGS="${LIBMAUSPKGCPPFLAGS} -fopenmp"
		LIBMAUSPKGLIBS="${LIBMAUSPKGLIBS} -fopenmp"
		LIBMAUSCXXFLAGS="${LIBMAUSCXXFLAGS} -fopenmp"
		LIBMAUSCFLAGS="${LIBMAUSCFLAGS} -fopenmp"
	fi
else
	AC_MSG_NOTICE([Required thread functionality not found, disabling multi threading.])
fi

case $target_cpu in
	i386|i486|i586|i686)
		HAVEI386="#define LIBMAUS2_HAVE_i386"
		;;
	x86_64|amd64)
		HAVEI386="#define LIBMAUS2_HAVE_i386"
		HAVEX8664="#define LIBMAUS2_HAVE_x86_64"
		;;
esac

AC_ARG_ENABLE(syncops,
        AS_HELP_STRING([--enable-syncops],[use atomic operation primitives (default yes)]),
        [syncops=${enableval}],[syncops=yes])

if test "${syncops}" = "yes" ; then
	HAVESYNCOPS=""
	case "${target_cpu}" in
		i386|i486|i586|i686)
			AC_LANG_PUSH([C++])
			AC_MSG_CHECKING([whether the C++ compiler supports synchronous add operations])
			AC_TRY_LINK([],[unsigned long long v = 0; __sync_fetch_and_add(&v,1)],[syncops=yes],[syncops=no])
			AC_MSG_RESULT([${syncops}])
			AC_LANG_POP

			if test "${syncops}" = "yes" ; then
				HAVESYNCOPS="#define LIBMAUS2_HAVE_SYNC_OPS"
			fi

			if test "${syncops}" = "no" ; then
				AC_LANG_PUSH([C++])
				CXXFLAGS_SAVE="${CXXFLAGS}"
				CXXFLAGS="-march=i586"
				AC_MSG_CHECKING([whether the C++ compiler supports the -march=i586 option and synchronous add operations])
				AC_TRY_LINK([],[unsigned long long v = 0; __sync_fetch_and_add(&v,1)],[syncops=yes],[syncops=no])
				AC_MSG_RESULT([${syncops}])
				CXXFLAGS="${CXXFLAGS_SAVE}"
				AC_LANG_POP

				if test "${syncops}" = "yes" ; then
					LIBMAUSCXXFLAGS="${LIBMAUSCXXFLAGS} -march=i586"
					LIBMAUSCFLAGS="${LIBMAUSCFLAGS} -march=i586"
					LIBMAUSARCHCFLAGS="${LIBMAUSARCHCFLAGS} -march=i586"
					HAVESYNCOPS="#define LIBMAUS2_HAVE_SYNC_OPS"
				fi
			fi
			;;
		*)
			if test "${syncops}" = "yes" ; then
				AC_LANG_PUSH([C++])
				AC_MSG_CHECKING([whether the C++ compiler supports __sync_fetch_and_add])
				AC_TRY_LINK([],[unsigned long long v = 0; __sync_fetch_and_add(&v,1)],[syncops=yes],[syncops=no])
				AC_MSG_RESULT([${syncops}])
				AC_LANG_POP
			fi
			if test "${syncops}" = "yes" ; then
				AC_LANG_PUSH([C++])
				AC_MSG_CHECKING([whether the C++ compiler supports __sync_add_and_fetch])
				AC_TRY_LINK([],[unsigned long long v = 0; __sync_add_and_fetch(&v,1)],[syncops=yes],[syncops=no])
				AC_MSG_RESULT([${syncops}])
				AC_LANG_POP
			fi
			if test "${syncops}" = "yes" ; then
				AC_LANG_PUSH([C++])
				AC_MSG_CHECKING([whether the C++ compiler supports __sync_fetch_and_and])
				AC_TRY_LINK([],[unsigned long long v = 0; __sync_fetch_and_and(&v,1)],[syncops=yes],[syncops=no])
				AC_MSG_RESULT([${syncops}])
				AC_LANG_POP
			fi
			if test "${syncops}" = "yes" ; then
				AC_LANG_PUSH([C++])
				AC_MSG_CHECKING([whether the C++ compiler supports __sync_fetch_and_or])
				AC_TRY_LINK([],[unsigned long long v = 0; __sync_fetch_and_or(&v,1)],[syncops=yes],[syncops=no])
				AC_MSG_RESULT([${syncops}])
				AC_LANG_POP
			fi
			if test "${syncops}" = "yes" ; then
				AC_LANG_PUSH([C++])
				AC_MSG_CHECKING([whether the C++ compiler supports __sync_fetch_and_sub])
				AC_TRY_LINK([],[unsigned long long v = 0; __sync_fetch_and_sub(&v,1)],[syncops=yes],[syncops=no])
				AC_MSG_RESULT([${syncops}])
				AC_LANG_POP
			fi
			if test "${syncops}" = "yes" ; then
				AC_LANG_PUSH([C++])
				AC_MSG_CHECKING([whether the C++ compiler supports __sync_bool_compare_and_swap])
				AC_TRY_LINK([],[unsigned long long v = 0; __sync_bool_compare_and_swap(&v,0,0)],[syncops=yes],[syncops=no])
				AC_MSG_RESULT([${syncops}])
				AC_LANG_POP
			fi
			if test "${syncops}" = "yes" ; then
				AC_LANG_PUSH([C++])
				AC_MSG_CHECKING([whether the C++ compiler supports __sync_lock_test_and_set])
				AC_TRY_LINK([],[unsigned int v = 0; __sync_lock_test_and_set(&v,1)],[syncops=yes],[syncops=no])
				AC_MSG_RESULT([${syncops}])
				AC_LANG_POP
			fi
			if test "${syncops}" = "yes" ; then
				AC_LANG_PUSH([C++])
				AC_MSG_CHECKING([whether the C++ compiler supports __sync_lock_release])
				AC_TRY_LINK([],[unsigned int v = 0; __sync_lock_release(&v)],[syncops=yes],[syncops=no])
				AC_MSG_RESULT([${syncops}])
				AC_LANG_POP
			fi
			if test "${syncops}" = "yes" ; then
				AC_LANG_PUSH([C++])
				AC_MSG_CHECKING([whether the C++ compiler supports __sync_val_compare_and_swap])
				AC_TRY_LINK([],[unsigned long long v = 0; __sync_val_compare_and_swap(&v,0,0)],[syncops=yes],[syncops=no])
				AC_MSG_RESULT([${syncops}])
				AC_LANG_POP
			fi

			if test "${syncops}" = "yes" ; then
				HAVESYNCOPS="#define LIBMAUS2_HAVE_SYNC_OPS"
			fi
			;;
	esac
fi

AC_ARG_ENABLE(synclock,
        AS_HELP_STRING([--enable-synclock],[use atomic lock primitives (default yes)]),
        [synclock=${enableval}],[synclock=yes])

if test "${synclock}" = "yes" ; then
	LIBMAUS2_HAVE_SYNC_LOCK=""
	case "${target_cpu}" in
		i386|i486|i586|i686)
			AC_LANG_PUSH([C++])
			AC_MSG_CHECKING([whether the C++ compiler supports synchronous lock operations])
			AC_TRY_LINK([],[unsigned int v = 0; __sync_lock_test_and_set(&v,1)],[synclock=yes],[synclock=no])
			AC_MSG_RESULT([${synclock}])
			AC_LANG_POP

			if test "${synclock}" = "yes" ; then
				HAVESYNCLOCK="#define LIBMAUS2_HAVE_SYNC_LOCK"
			fi

			if test "${synclock}" = "no" ; then
				AC_LANG_PUSH([C++])
				CXXFLAGS_SAVE="${CXXFLAGS}"
				CXXFLAGS="-march=i586"
				AC_MSG_CHECKING([whether the C++ compiler supports the -march=i586 option and synchronous lock operations])
				AC_TRY_LINK([],[unsigned int v = 0; __sync_lock_test_and_set(&v,1)],[synclock=yes],[synclock=no])
				AC_MSG_RESULT([${synclock}])
				CXXFLAGS="${CXXFLAGS_SAVE}"
				AC_LANG_POP

				if test "${synclock}" = "yes" ; then
					LIBMAUSCXXFLAGS="${LIBMAUSCXXFLAGS} -march=i586"
					LIBMAUSCFLAGS="${LIBMAUSCFLAGS} -march=i586"
					LIBMAUSARCHCFLAGS="${LIBMAUSARCHCFLAGS} -march=i586"
					HAVESYNCLOCK="#define LIBMAUS2_HAVE_SYNC_LOCK"
				fi
			fi
			;;
		*)
			AC_LANG_PUSH([C++])
			AC_MSG_CHECKING([whether the C++ compiler supports synchronous lock operations])
			AC_TRY_LINK([],[unsigned int v = 0; __sync_lock_test_and_set(&v,1)],[synclock=yes],[synclock=no])
			AC_MSG_RESULT([${synclock}])
			AC_LANG_POP

			if test "${synclock}" = "yes" ; then
				HAVESYNCLOCK="#define LIBMAUS2_HAVE_SYNC_LOCK"
			fi
			;;
		*)
			;;
	esac
fi

AC_LANG_PUSH([C++])
AC_MSG_CHECKING([whether posix_memalign is present])
AC_TRY_COMPILE([#include <cstdlib>],[void * ptr = 0; posix_memalign(&ptr,64,128);],[posixmemalign=yes],[posixmemalign=no])
AC_MSG_RESULT([${posixmemalign}])
AC_LANG_POP

AC_LANG_PUSH([C++])
AC_MSG_CHECKING([whether getpagesize is present])
AC_TRY_COMPILE([#include <unistd.h>],[unsigned int pagesize = getpagesize();],[getpagesize=yes],[getpagesize=no])
AC_MSG_RESULT([${getpagesize}])
AC_LANG_POP

HAVEPOSIXMEMALIGN=""
if test "${posixmemalign}" = "yes" ; then
	HAVEPOSIXMEMALIGN="#define LIBMAUS2_HAVE_POSIX_MEMALIGN"
fi

HAVEGETPAGESIZE=""
if test "${getpagesize}" = "yes" ; then
	HAVEGETPAGESIZE="#define LIBMAUS2_HAVE_GETPAGESIZE"
fi

IOLIBCPPFLAGS=
IOLIBLDFLAGS=
IOLIBLIBS=
IOLIBDEFINE=
IOLIBCALLBACKDEFINE=
IOLIBINDEXCALLBACKDEFINE=
IOLIBHAVENEWCRAMINTERFACE=no
IOLIBNEWINTERFACEDEFINE=
AC_ARG_WITH([io_lib],
            [AS_HELP_STRING([--with-io_lib@<:@=PATH@:>@], [support for io_lib library @<:@default=no@:>@])],
            [with_io_lib=${withval}],
            [with_io_lib=no])

if [[ "${have_dynamic_loading}" = "yes" -a "${getpagesize}" = "yes" -a "${posixmemalign}" = "yes" -a "${with_io_lib}" != "no" -a "${sharedlibmaus2}" != "no" ]] ; then
	if [[ \( ! -z "${with_io_lib}" \) -a \( "${with_io_lib}" != "yes" \) ]] ; then
		IOLIBCPPFLAGS="-I${with_io_lib}/include"
		IOLIBLDFLAGS="-L${with_io_lib}/lib"
	fi

	IOLIBLIBS="-lstaden-read"

	CPPFLAGSSAVE="${CPPFLAGS}"
	LDFLAGSSAVE="${LDFLAGS}"
	LIBS_SAVE="${LIBS}"
	CPPFLAGS="${CPPFLAGS} ${IOLIBCPPFLAGS}"
	LDFLAGS="${LDFLAGS} ${IOLIBLDFLAGS}"
	LIBS="${LIBS} ${IOLIBLIBS} ${ZLIBLIBS} -lm"

	AC_LANG_PUSH([C])
	AC_CHECK_HEADER(io_lib/scram.h, [io_lib_scram_h=yes], [io_lib_scram_h=no])
	AC_CHECK_FUNC(scram_open,scram_open=yes,scram_open=no)
	AC_CHECK_FUNC(scram_open_cram_via_callbacks,scram_open_cram_via_callbacks=yes,scram_open_cram_via_callbacks=no)
	AC_CHECK_FUNC(scram_close,scram_close=yes,scram_close=no)
	AC_CHECK_FUNC(scram_get_header,scram_get_header=yes,scram_get_header=no)
	AC_CHECK_FUNC(scram_get_seq,scram_get_seq=yes,scram_get_seq=no)
	AC_CHECK_FUNC(scram_set_option,scram_set_option=yes,scram_set_option=no)
	AC_CHECK_FUNC(scram_open_cram_via_callbacks,scram_open_cram_via_callbacks=yes,scram_open_cram_via_callbacks=no)
	AC_CHECK_FUNC(cram_index_load_via_callbacks,cram_index_load_via_callbacks=yes,cram_index_load_via_callbacks=no)
	dnl 
	AC_CHECK_FUNC(cram_allocate_encoder,cram_allocate_encoder=yes,cram_allocate_encoder=no)
	AC_CHECK_FUNC(cram_deallocate_encoder,cram_deallocate_encoder=yes,cram_deallocate_encoder=no)
	AC_CHECK_FUNC(cram_enque_compression_block,cram_enque_compression_block=yes,cram_enque_compression_block=no)
	AC_CHECK_FUNC(cram_process_work_package,cram_process_work_package=yes,cram_process_work_package=no)
	AC_LANG_POP

	if [[ "${io_lib_scram_h}" != "yes" ]] ; then
		AC_MSG_ERROR([--with-io_lib is set to ${with_io_lib}, but io_lib headers are not available])
	fi
	if [[ "${scram_open}" != "yes" ]] ; then
		AC_MSG_ERROR([--with-io_lib is set to ${with_io_lib}, but io_lib library (libstaden-read) is not available])
	fi
	if [[ "${scram_close}" != "yes" ]] ; then
		AC_MSG_ERROR([--with-io_lib is set to ${with_io_lib}, but io_lib library (libstaden-read) is not available])
	fi
	if [[ "${scram_get_header}" != "yes" ]] ; then
		AC_MSG_ERROR([--with-io_lib is set to ${with_io_lib}, but io_lib library (libstaden-read) is not available])
	fi
	if [[ "${scram_get_seq}" != "yes" ]] ; then
		AC_MSG_ERROR([--with-io_lib is set to ${with_io_lib}, but io_lib library (libstaden-read) is not available])
	fi
	if [[ "${scram_set_option}" != "yes" ]] ; then
		AC_MSG_ERROR([--with-io_lib is set to ${with_io_lib}, but io_lib library (libstaden-read) is not available])
	fi

        AC_LANG_PUSH([C])
        AC_MSG_CHECKING([whether we can compile a program using io_lib])
                        AC_LINK_IFELSE([AC_LANG_SOURCE([#include <io_lib/scram.h>
                    #include <stdlib.h>

                    int main() 
                    {
			scram_fd * cfd = scram_open("filename","C");
			SAM_hdr * header = 0;
			bam_seq_t * s = 0;

			if ( ! cfd )
				return -1;

			if ( ! (header = scram_get_header(cfd)) )
			{
				scram_close(cfd);
				return -1;
			}

			while (scram_get_seq(cfd, &s) >= 0) 
			{
			}

			if ( ! scram_eof(cfd) )
			{
				scram_close(cfd);
				return -1;
			}

			scram_close(cfd);
			return 0;
                    }])],
                        have_io_lib=yes,
                        have_io_lib=no
                )
        AC_MSG_RESULT($have_io_lib)
        AC_LANG_POP

	if [[ "${have_io_lib}" != "yes" ]] ; then
		AC_MSG_ERROR([--with-io_lib is set to ${with_io_lib}, but io_lib library (libstaden-read) is not available])	
	fi

	if test "${scram_open_cram_via_callbacks}" = "yes" ; then
		AC_LANG_PUSH([C])
		AC_MSG_CHECKING([whether we can compile a program using scram_open_cram_via_callbacks in io_lib])
				AC_LINK_IFELSE([AC_LANG_SOURCE([#include <io_lib/scram.h>
			    #include <stdlib.h>

			    int main() 
			    {
				char const * filename = "filename";
				cram_io_allocate_read_input_t   callback_allocate_function = NULL;
				cram_io_deallocate_read_input_t callback_deallocate_function = NULL;
				size_t const bufsize = 32768;
					    
				scram_fd * cfd = scram_open_cram_via_callbacks(filename,callback_allocate_function,callback_deallocate_function,bufsize);
				SAM_hdr * header = 0;
				bam_seq_t * s = 0;

				if ( ! cfd )
					return -1;

				if ( ! (header = scram_get_header(cfd)) )
				{
					scram_close(cfd);
					return -1;
				}

				while (scram_get_seq(cfd, &s) >= 0) 
				{
				}

				if ( ! scram_eof(cfd) )
				{
					scram_close(cfd);
					return -1;
				}

				scram_close(cfd);
				return 0;
			    }])],
				have_io_lib_with_callbacks=yes,
				have_io_lib_with_callbacks=no
			)
		AC_MSG_RESULT($have_io_lib_with_callbacks)
		AC_LANG_POP

		if test "${have_io_lib_with_callbacks}" = "yes" ; then
			IOLIBCALLBACKDEFINE="#define LIBMAUS2_HAVE_IO_LIB_INPUT_CALLBACKS"
		fi
	fi
	
	if test "${cram_index_load_via_callbacks}" = "yes" ; then
		AC_LANG_PUSH([C])
		AC_MSG_CHECKING([whether we can compile a program using cram_index_load_via_callbacks in io_lib])
				AC_LINK_IFELSE([AC_LANG_SOURCE([#include <io_lib/scram.h>
			    #include <stdlib.h>

			    int main() 
			    {
				char const * filename = "filename";
				cram_io_allocate_read_input_t   callback_allocate_function = NULL;
				cram_io_deallocate_read_input_t callback_deallocate_function = NULL;
				size_t const bufsize = 32768;
				int indexr = -1;
					    
				scram_fd * cfd = scram_open_cram_via_callbacks(filename,callback_allocate_function,callback_deallocate_function,bufsize);
				SAM_hdr * header = 0;
				bam_seq_t * s = 0;

				if ( ! cfd )
					return -1;

				if ( ! (header = scram_get_header(cfd)) )
				{
					scram_close(cfd);
					return -1;
				}
				
				indexr = cram_index_load_via_callbacks(cfd->c,filename,callback_allocate_function,callback_deallocate_function);
				
				if ( indexr < 0 )
				{
					scram_close(cfd);
					return -1;				
				}

				while (scram_get_seq(cfd, &s) >= 0) 
				{
				}

				if ( ! scram_eof(cfd) )
				{
					scram_close(cfd);
					return -1;
				}

				scram_close(cfd);
				return 0;
			    }])],
				have_io_lib_with_index_callbacks=yes,
				have_io_lib_with_index_callbacks=no
			)
		AC_MSG_RESULT($have_io_lib_with_index_callbacks)
		AC_LANG_POP

		if test "${have_io_lib_with_index_callbacks}" = "yes" ; then
			IOLIBINDEXCALLBACKDEFINE="#define LIBMAUS2_HAVE_IO_LIB_INPUT_INDEX_CALLBACKS"
		fi
	fi


	if test \( "${cram_allocate_encoder}" = "yes" \) -a \( "${cram_deallocate_encoder}" = "yes" \) -a \( "${cram_enque_compression_block}" = "yes" \) -a \( "${cram_process_work_package}" = "yes" \) ; then
		IOLIBHAVENEWCRAMINTERFACE=yes
		IOLIBNEWINTERFACEDEFINE="#define LIBMAUS2_HAVE_IO_NEW_CRAM_INTERFACE"
	fi

	CPPFLAGS="${CPPFLAGSSAVE}"
	LDFLAGS="${LDFLAGSSAVE}"
	LIBS="${LIBS_SAVE}"

	IOLIBDEFINE="#define LIBMAUS2_HAVE_IO_LIB"
fi

AC_MSG_CHECKING([whether MSG_CMSG_CLOEXEC is defined])	

AC_LANG_PUSH([C])

AC_TRY_COMPILE([#include <sys/types.h>
#include <sys/socket.h>
#include <string.h>
#include <stdio.h>],[const int flag = MSG_CMSG_CLOEXEC;],[flag_MSG_CMSG_CLOEXEC=yes],[flag__MSG_CMSG_CLOEXEC=no])
AC_MSG_RESULT([${flag_MSG_CMSG_CLOEXEC}])

AC_LANG_POP

if [[ "${flag_MSG_CMSG_CLOEXEC}" = "yes" ]] ; then
	HAVEMSGCMSGCLOEXEC="#define LIBMAUS2_HAVE_MSG_CMSG_CLOEXEC"	
fi

AC_ARG_WITH([lzma],
	[AS_HELP_STRING([--with-lzma@<:@=PATH@:>@], [path to installed lzma library @<:@default=no@:>@])],
	[with_lzma=${withval}],
	[with_lzma=no])

LIBMAUS2_HAVE_LZMA=
LIBMAUS2_LZMA_LIBS=
LIBMAUS2_LZMA_CPPFLAGS=
LIBMAUS2_LZMA_REQ=

if test "${with_lzma}" != "no" ; then
	if test ! -z "${with_lzma}" ; then
		PKGCONFIGPATHSAVE="${PKG_CONFIG_PATH}"
		if test -z "${PKG_CONFIG_PATH}" ; then
			export PKG_CONFIG_PATH="${with_lzma}/lib/pkgconfig"
		else
			export PKG_CONFIG_PATH="${with_lzma}/lib/pkgconfig:${PKG_CONFIG_PATH}"
		fi
	fi

	PKG_CHECK_MODULES([liblzma],[liblzma >= 5.1.0],[lzmapkg=yes],[lzmapkg=no])

	if test ! -z "${with_lzma}" ; then
		if test ! -z "${PKGCONFIGPATHSAVE}" ; then
			export PKG_CONFIG_PATH="${PKGCONFIGPATHSAVE}"
		fi
	fi

	if test "${lzmapkg}" = "yes" ; then
		AC_LANG_PUSH([C++])

		LIBS_SAVE="${LIBS}"
		LIBS="${LIBS} ${liblzma_LIBS}"
		CPPFLAGSSAVE="${CPPFLAGS}"	
		CPPFLAGS="${CPPFLAGS} ${liblzma_CFLAGS}"

		AC_LANG_PUSH([C++])
		AC_CHECK_HEADER(lzma.h, [have_lzma_h=yes], [have_lzma_h=no])
		AC_LANG_POP

		AC_MSG_CHECKING([whether we can compile a program using the lzma library])
		AC_LANG_PUSH([C++])
		AC_TRY_LINK([#include <lzma.h>
#include <cstring>
],[
		/* init LZMA decoder */
		lzma_stream lstr = LZMA_STREAM_INIT;

		#if LZMA_VERSION <= UINT32_C(49990030)
		int ret = lzma_auto_decoder(&lstr, NULL, NULL);
		#else
		int ret = lzma_auto_decoder(&lstr, UINT64_MAX, 0);
		#endif

		lzma_end(&lstr);
		],[have_lzma=yes],[have_lzma=no])
		AC_MSG_RESULT([${have_lzma}])

		LIBS="${LIBS_SAVE}"
		CPPFLAGS="${CPPFLAGSSAVE}"

		AC_LANG_POP

		if test "${have_lzma}" = "yes" ; then
			LIBMAUS2_HAVE_LZMA="#define LIBMAUS2_HAVE_LZMA"
			LIBMAUS2_LZMA_LIBS="${liblzma_LIBS}"
			LIBMAUS2_LZMA_CPPFLAGS="${liblzma_CFLAGS}"
			LIBMAUS2_LZMA_REQ="liblzma"

			LIBMAUSCPPFLAGS="${LIBMAUSCPPFLAGS} ${LIBMAUS2_LZMA_CPPFLAGS}"
			LIBMAUSLIBS="${LIBMAUSLIBS} ${LIBMAUS2_LZMA_LIBS}"
		fi
	fi
fi

AC_ARG_WITH([libarchive],
	[AS_HELP_STRING([--with-libarchive@<:@=PATH@:>@], [path to installed libarchive library @<:@default=@:>@])],
	[with_libarchive=${withval}],
	[with_libarchive=])

LIBMAUS2_HAVE_LIBARCHIVE=
LIBMAUS2_LIBARCHIVE_LIBS=
LIBMAUS2_LIBARCHIVE_CPPFLAGS=
LIBMAUS2_LIBARCHIVE_REQ=

if test "${with_libarchive}" != "no" ; then
	if test ! -z "${with_libarchive}" ; then
		PKGCONFIGPATHSAVE="${PKG_CONFIG_PATH}"
		if test -z "${PKG_CONFIG_PATH}" ; then
			export PKG_CONFIG_PATH="${with_libarchive}/lib/pkgconfig"
		else
			export PKG_CONFIG_PATH="${with_libarchive}/lib/pkgconfig:${PKG_CONFIG_PATH}"
		fi
	fi

	PKG_CHECK_MODULES([libarchive],[libarchive >= 3.1.2],[libarchivepkg=yes],[libarchivepkg=no])

	if test ! -z "${with_libarchive}" ; then
		if test ! -z "${PKGCONFIGPATHSAVE}" ; then
			export PKG_CONFIG_PATH="${PKGCONFIGPATHSAVE}"
		fi
	fi

	if test "${libarchivepkg}" = "yes" ; then
		AC_LANG_PUSH([C++])

		LIBS_SAVE="${LIBS}"
		LIBS="${LIBS} ${libarchive_LIBS}"
		CPPFLAGSSAVE="${CPPFLAGS}"
		CPPFLAGS="${CPPFLAGS} ${libarchive_CFLAGS}"

		AC_LANG_PUSH([C++])
		AC_CHECK_HEADER(archive.h, [have_libarchive_h=yes], [have_libarchive_h=no])
		AC_LANG_POP

		AC_MSG_CHECKING([whether we can compile a program using the libarchive library])
		AC_LANG_PUSH([C++])
		AC_TRY_LINK([#include <archive.h>
],[
		struct archive * a;
		a = archive_read_new();
		archive_read_free(a);
		],[have_libarchive=yes],[have_libarchive=no])
		AC_MSG_RESULT([${have_libarchive}])

		LIBS="${LIBS_SAVE}"
		CPPFLAGS="${CPPFLAGSSAVE}"

		AC_LANG_POP

		if test "${have_libarchive}" = "yes" ; then
			LIBMAUS2_HAVE_LIBARCHIVE="#define LIBMAUS2_HAVE_LIBARCHIVE"
			LIBMAUS2_LIBARCHIVE_LIBS="${libarchive_LIBS}"
			LIBMAUS2_LIBARCHIVE_CPPFLAGS="${libarchive_CFLAGS}"
			LIBMAUS2_LIBARCHIVE_REQ="libarchive"

			LIBMAUSCPPFLAGS="${LIBMAUSCPPFLAGS} ${LIBMAUS2_LIBARCHIVE_CPPFLAGS}"
			LIBMAUSLIBS="${LIBMAUSLIBS} ${LIBMAUS2_LIBARCHIVE_LIBS}"
		fi
	fi
fi

AC_ARG_WITH([gnutls],
	[AS_HELP_STRING([--with-gnutls@<:@=PATH@:>@], [path to installed gnutls library @<:@default=no@:>@])],
	[with_gnutls=${withval}],
	[with_gnutls=no])

GNUTLS=
GNUTLSREQ=
if test "${with_gnutls}" != "no" ; then

	if test ! -z "${with_gnutls}" ; then
		PKGCONFIGPATHSAVE="${PKG_CONFIG_PATH}"
		if test -z "${PKG_CONFIG_PATH}" ; then
			export PKG_CONFIG_PATH="${with_gnutls}/lib/pkgconfig"
		else
			export PKG_CONFIG_PATH="${with_gnutls}/lib/pkgconfig:${PKG_CONFIG_PATH}"
		fi
	fi

	PKG_CHECK_MODULES([gnutls],[gnutls >= 2.12.14],[gnutlspkg=yes],[gnutlspkg=no])

	if test ! -z "${with_gnutls}" ; then
		if test ! -z "${PKGCONFIGPATHSAVE}" ; then
			export PKG_CONFIG_PATH="${PKGCONFIGPATHSAVE}"
		fi
	fi

	GNUTLS=
	if [[ "${gnutlspkg}" = "yes" ]] ; then
		AC_LANG_PUSH([C++])
		LIBS_SAVE="${LIBS}"
		LIBS="${LIBS} ${gnutls_LIBS}"
		CPPFLAGSSAVE="${CPPFLAGS}"
		
		CPPFLAGS="${CPPFLAGS} ${gnutls_CFLAGS}"
		AC_MSG_CHECKING([whether we can compile a gnutls program])
		AC_TRY_LINK([#include <gnutls/gnutls.h>
#include <gnutls/x509.h>		
	],[;],[gnutls=yes],[gnutls=no])
		AC_MSG_RESULT([${gnutls}])
		LIBS="${LIBS_SAVE}"
		CPPFLAGS="${CPPFLAGSSAVE}"
		
		AC_LANG_POP

		if [[ "$gnutls" = "no" ]] ; then
			AC_MSG_ERROR([Failed to compile gnutls program.]);
		else
			GNUTLS="#define LIBMAUS2_HAVE_GNUTLS"
			GNUTLSLDFLAGS=""
			GNUTLSLIBS="${gnutls_LIBS}"
			GNUTLSCPPFLAGS="${gnutls_CFLAGS}"
			GNUTLSREQ="gnutls"
		fi
	else
		AC_MSG_ERROR([GNU TLS not found in required version])
	fi

fi

AC_ARG_WITH([nettle],
	[AS_HELP_STRING([--with-nettle@<:@=PATH@:>@], [path to installed nettle library @<:@default=no@:>@])],
	[with_nettle=${withval}],
	[with_nettle=no])

NETTLE=
NETTLEREQ=
if test "${with_nettle}" != "no" ; then

	if test ! -z "${with_nettle}" ; then
		PKGCONFIGPATHSAVE="${PKG_CONFIG_PATH}"
		if test -z "${PKG_CONFIG_PATH}" ; then
			export PKG_CONFIG_PATH="${with_nettle}/lib/pkgconfig"
		else
			export PKG_CONFIG_PATH="${with_nettle}/lib/pkgconfig:${PKG_CONFIG_PATH}"
		fi
	fi

	PKG_CHECK_MODULES([nettle],[nettle >= 2.4],[nettlepkg=yes],[nettlepkg=no])

	if test ! -z "${with_nettle}" ; then
		if test ! -z "${PKGCONFIGPATHSAVE}" ; then
			export PKG_CONFIG_PATH="${PKGCONFIGPATHSAVE}"
		fi
	fi

	NETTLE=
	if [[ "${nettlepkg}" = "yes" ]] ; then
		AC_LANG_PUSH([C++])
		LIBS_SAVE="${LIBS}"
		LIBS="${LIBS} ${nettle_LIBS}"
		CPPFLAGSSAVE="${CPPFLAGS}"
		CPPFLAGS="${CPPFLAGS} ${nettle_CFLAGS}"

		AC_MSG_CHECKING([whether we can compile a nettle program])
		AC_TRY_LINK([#include <nettle/sha.h>
	],[;],[nettle=yes],[nettle=no])
		AC_MSG_RESULT([${nettle}])
		LIBS="${LIBS_SAVE}"
		CPPFLAGS="${CPPFLAGSSAVE}"
		
		AC_LANG_POP

		if [[ "$nettle" = "no" ]] ; then
			AC_MSG_ERROR([Failed to compile nettle program.]);
		else
			NETTLE="#define LIBMAUS2_HAVE_NETTLE"
			NETTLELDFLAGS=""
			NETTLELIBS="${nettle_LIBS}"
			NETTLECPPFLAGS="${nettle_CFLAGS}"
			NETTLEREQ="nettle"
		fi
	else
		AC_MSG_ERROR([nettle not found in required version])
	fi

	if [[ ! -z "${NETTLE}" ]] ; then
		AC_LANG_PUSH([C++])
		LIBS_SAVE="${LIBS}"
		LIBS="${LIBS} ${nettle_LIBS}"
		CPPFLAGSSAVE="${CPPFLAGS}"
		CPPFLAGS="${CPPFLAGS} ${nettle_CFLAGS}"

		AC_MSG_CHECKING([whether we can compile a program including nettle/sha3.h])
		AC_TRY_LINK([#include <nettle/sha3.h>
	],[;],[nettle_sha_3=yes],[nettle_sha_3=no])
		AC_MSG_RESULT([${nettle_sha_3}])
		LIBS="${LIBS_SAVE}"
		CPPFLAGS="${CPPFLAGSSAVE}"

		AC_LANG_POP

		if [[ "$nettle_sha_3" = "yes" ]] ; then
			LIBMAUS2_NETTLE_HAVE_SHA3="#define LIBMAUS2_NETTLE_HAVE_SHA3"
		fi
	fi
fi

AC_LANG_PUSH([C++])
AC_CHECK_HEADER(libkern/OSAtomic.h, [libkern_osatomic_h=yes], [libkern_osatomic_h=no])
AC_LANG_POP

HAVEDARWINSPINLOCKS=
if test "${libkern_osatomic_h}" = "yes" ; then
	AC_MSG_CHECKING([for Darwin type spin locks])
	AC_LANG_PUSH([C++])
	AC_TRY_LINK([#include <libkern/OSAtomic.h>],[
	OSSpinLock lock = OS_SPINLOCK_INIT;

	OSSpinLockLock(&lock);
	OSSpinLockUnlock(&lock);
	
	if ( OSSpinLockTry(&lock) )
		OSSpinLockUnlock(&lock);

	return 0;
],[have_darwin_spinlocks=yes],[have_darwin_spinlocks=no])
		AC_MSG_RESULT([${have_darwin_spinlocks}])
		AC_LANG_POP

		if test "$have_darwin_spinlocks" = "yes" ; then
			HAVEDARWINSPINLOCKS="#define LIBMAUS2_HAVE_DARWIN_SPINLOCKS"
		fi
fi

AC_MSG_CHECKING([for unsigned __int128])
AC_LANG_PUSH([C++])
	AC_TRY_LINK([#include <iostream>],[
	#if defined(__SIZEOF_INT128__)
		#if __SIZEOF_INT128__ == 16
		unsigned __int128 i = 5;
		std::cout << static_cast<int>(i) << std::endl;
		return 0;
		#else
		#error "__SIZEOF_INT128__ not 16"
		#endif
	#else
	#error "__SIZEOF_INT128__ not defined"
	#endif
],[have_unsigned_int128=yes],[have_unsigned_int128=no])
AC_MSG_RESULT([${have_unsigned_int128}])
AC_LANG_POP

if test "$have_unsigned_int128" = "yes" ; then
	HAVEUNSIGNEDINT128="#define LIBMAUS2_HAVE_UNSIGNED_INT128"
fi

AC_ARG_WITH([hdf5],
	[AS_HELP_STRING([--with-hdf5@<:@=PATH@:>@], [path to installed HDF5 library @<:@default=no@:>@])],
	[with_hdf5=${withval}],
	[with_hdf5=no])
LIBMAUS2_HAVE_HDF5=

if test "${with_hdf5}" != "no" ; then
	HDF5DIR=
	if test "${with_hdf5}" != "yes" ; then
		HDF5DIR=${with_hdf5}
	fi
	
	CPPFLAGS_SAVE=${CPPFLAGS}
	CXXFLAGS_SAVE=${CXXFLAGS}
	LIBS_SAVE=${LIBS}
	LDFLAGS_SAVE=${LDFLAGS}
	
	if test ! -z "${HDF5DIR}" ; then
		CPPFLAGS="-I${HDF5DIR}/include"
		LDFLAGS="-L${HDF5DIR}/lib"
	fi

	AC_LANG_PUSH([C++])
	AC_CHECK_HEADER(hdf5.h, [hdf5_h=yes], [hdf5_h=no])
	AC_LANG_POP
	
	if test "${hdf5_h}" = "yes" ; then
AC_MSG_CHECKING([for hdf5_hl.h])
AC_LANG_PUSH([C++])
	AC_TRY_LINK([#include <hdf5.h>
#include <hdf5_hl.h>],[
	return 0;
],[hdf5_hl_h=yes],[hdf5_hl_h=no])
AC_MSG_RESULT([${hdf5_hl_h}])	
	fi
	
	if test "${hdf5_hl_h}" = "yes" ; then	
AC_MSG_CHECKING([whether we can compile a program using the HDF5 library])
AC_LANG_PUSH([C++])
	LIBS="${LIBS} -lhdf5_hl -lhdf5"
	AC_TRY_LINK([#include <hdf5.h>
#include <hdf5_hl.h>],[
	hid_t const file_id = H5Fopen("file.h5", H5F_ACC_RDONLY, H5P_DEFAULT);
	herr_t status = H5Fclose(file_id);
	return 0;
],[hdf5=yes],[hdf5=no])
AC_MSG_RESULT([${hdf5}])
		if test "${hdf5}" ; then
			LIBMAUS2_HAVE_HDF5="#define LIBMAUS2_HAVE_HDF5"
		fi
	fi

	CPPFLAGS=${CPPFLAGS_SAVE}
	CXXFLAGS=${CXXFLAGS_SAVE}
	LIBS=${LIBS_SAVE}
	LDFLAGS=${LDFLAGS_SAVE}
fi

AC_ARG_WITH([irods],
	[AS_HELP_STRING([--with-irods@<:@=PATH@:>@], [path to installed IRODS @<:@default=no@:>@])],
	[with_irods=${withval}],
	[with_irods=no])
LIBMAUS2_HAVE_IRODS=
LIBMAUS2_IRODS_NEED_PREFIX=
IRODSCPPFLAGS=
IRODSLDFLAGS=
IRODSLIBS=
IRODSCXXFLAGS=

if test "${with_irods}" != "no" ; then
	IRODSDIR=
	if test "${with_irods}" != "yes" ; then
		IRODSDIR=${with_irods}
	fi
	
	CPPFLAGS_SAVE=${CPPFLAGS}
	CXXFLAGS_SAVE=${CXXFLAGS}
	LIBS_SAVE=${LIBS}
	LDFLAGS_SAVE=${LDFLAGS}
	
	if test ! -z "${IRODSDIR}" ; then
		IRODSCPPFLAGS="-I${IRODSDIR}/lib/api/include -I ${IRODSDIR}/lib/core/include -I ${IRODSDIR}/lib/sha1/include -I ${IRODSDIR}/lib/md5/include -I ${IRODSDIR}/server/core/include -I ${IRODSDIR}/server/icat/include -I ${IRODSDIR}/server/drivers/include -I ${IRODSDIR}/server/re/include"
		IRODSLDFLAGS="-L${IRODSDIR}/lib/core/obj"
	else
		IRODSCPPFLAGS=
		IRODSLDFLAGS=
	fi

	CPPFLAGS="${CPPFLAGS} ${IRODSCPPFLAGS}"
	LDFLAGS="${LDFLAGS} ${IRODSLDFLAGS}"


	AC_LANG_PUSH([C++])
	AC_CHECK_HEADER(rodsClient.h, [rodsclient_h=yes], [rodsclient_h=no])
	AC_LANG_POP

	AC_LANG_PUSH([C++])
	AC_CHECK_HEADER(irods/rodsClient.h, [irods_rodsclient_h=yes], [irods_rodsclient_h=no])
	AC_LANG_POP

	if test ${rodsclient_h} = "yes" -o ${irods_rodsclient_h} = "yes" ; then
		have_rodsclient_h="yes"
	else
		have_rodsclient_h="no"
	fi

	if test ${rodsclient_h} = "no" -a ${irods_rodsclient_h} = "yes" ; then
		rods_need_irods_prefix="yes"
		LIBMAUS2_IRODS_NEED_PREFIX="#define LIBMAUS2_IRODS_NEED_PREFIX"
		LIBMAUS2_IRODS_HEADER="irods/rodsClient.h"
	else
		rods_need_irods_prefix="no"
		LIBMAUS2_IRODS_HEADER="rodsClient.h"
	fi

	if test "${have_rodsclient_h}" = "yes" ; then
AC_MSG_CHECKING([whether irods version is >= 4])
AC_LANG_PUSH([C++])
	AC_TRY_COMPILE([#include <${LIBMAUS2_IRODS_HEADER}>
],[
	#if defined(IRODS_VERSION_MAJOR) && IRODS_VERSION_MAJOR >= 4

	#else
	#error "Not version 4"
	#endif
],[irods_is_version_4=yes],[irods_is_version_4=no])
AC_MSG_RESULT([${irods_is_version_4}])
	fi

	if test ${irods_is_version_4} = "yes" ; then
		IRODSLIBS="-lRodsAPIs -pthread -ldl -lgssapi_krb5 -lboost_regex -lboost_thread -lboost_system -lboost_filesystem -lboost_chrono -ljansson -lssl -lcrypto"
	else
		IRODSLIBS="-lRodsAPIs -pthread -ldl -lgssapi_krb5"
	fi

	LIBS="${IRODSLIBS} ${LIBS}"

	if test "${have_rodsclient_h}" = "yes" ; then
AC_MSG_CHECKING([for ${LIBMAUS2_IRODS_HEADER}])
AC_LANG_PUSH([C++])
	AC_TRY_LINK([#include <${LIBMAUS2_IRODS_HEADER}>
],[
	return 0;
],[rodsclient_h=yes],[rodsclient_h=no])
AC_MSG_RESULT([${rodsclient_h}])	
	fi

	if test "${rodsclient_h}" = "yes" ; then	
AC_MSG_CHECKING([whether we can compile a program using the IRODS library])
AC_LANG_PUSH([C++])
	AC_TRY_LINK([#include <${LIBMAUS2_IRODS_HEADER}>],[
	rodsEnv myRodsEnv;
	int const status = getRodsEnv (&myRodsEnv);
	return 0;
],[irods=yes],[irods=no])
AC_MSG_RESULT([${irods}])
		if test "${irods}" = "yes" ; then
			LIBMAUS2_HAVE_IRODS="#define LIBMAUS2_HAVE_IRODS"
		fi
	fi

	CPPFLAGS=${CPPFLAGS_SAVE}
	CXXFLAGS=${CXXFLAGS_SAVE}
	LIBS=${LIBS_SAVE}
	LDFLAGS=${LDFLAGS_SAVE}
fi

case $host_os in
  *mingw32*)
    LIBMAUSLDFLAGS="${LIBMAUSLDFLAGS} -no-undefined" # -avoid-version
    ;;
  *)
    LIBMAUSLDFLAGS="${LIBMAUSLDFLAGS}"
    ;;
esac

case $host_os in
  freebsd*)
    LIBMAUSLIBS="${LIBMAUSLIBS} -lkvm"
    LIBMAUSPKGLIBS="${LIBMAUSPKGLIBS} -lkvm"
    ;;
  *)
    LIBMAUSLIBS="${LIBMAUSLIBS}"
    LIBMAUSPKGLIBS="${LIBMAUSPKGLIBS}"
    ;;
esac


PACKAGE_NAME=${PACKAGE}
PACKAGE_VERSION=${VERSION}

TESTPROGS="testAIO testbitbtree testBitIO testbtree testBWTDyn testBWTHufDyn testDivSufSort"
TESTPROGS="${TESTPROGS} testDNABitWords testFastRead testHuffman testIsa testkmp"
TESTPROGS="${TESTPROGS} testlz testOS testRank testToWaveletTreeBits testWaveletExternal"
TESTPROGS="${TESTPROGS} testTrie testbandedlcs testbamwriter testhashlcs"
TESTPROGS="${TESTPROGS} testarraydecode testsnappy testsnappyconcat testgunzip"
TESTPROGS="${TESTPROGS} testregex testhashcollisions testsimplebloomcollisions"
TESTPROGS="${TESTPROGS} testsimplehash testsimplecountinghash testsyncreorderset"
TESTPROGS="${TESTPROGS} testcachealignedalloc testblocksynchronous testsyncfastreaderbase"
TESTPROGS="${TESTPROGS} testdl testdifenc testbwtmergeinternal testfastarewrite testfastarecode"
TESTPROGS="${TESTPROGS} testbamtofastq testbamrange testbamdamage testgamma testcompact"
TESTPROGS="${TESTPROGS} testbytetocompact testscramtosam testpacdecode testutf8split testcirchash"
TESTPROGS="${TESTPROGS} testrmmtree testcst testbamcmp testbamdif testqreorder testfqbgzf"
TESTPROGS="${TESTPROGS} testoverlap testcompactfastrandom testbamindex testbamrewrite"
TESTPROGS="${TESTPROGS} testfastqstream testsort testexternalsort testcollatespeed"
TESTPROGS="${TESTPROGS} testbamheaderparser testbammergecoordinate testbammergecollate"
TESTPROGS="${TESTPROGS} testbammergequeryname testbamcat testautoarray2d testhist"
TESTPROGS="${TESTPROGS} testfastaparse testvalidatebamindex testeditdistance testthreadpool"
TESTPROGS="${TESTPROGS} testsimplethreadpool testthreadpoolbamdecode testsimplethreadpoolbamdecode"
TESTPROGS="${TESTPROGS} testgaparraybyte testzlibconcat testsimplecompressblock testrazdec"
TESTPROGS="${TESTPROGS} testfaindex testfastablockrecode testhttp testftp testrlhist"
TESTPROGS="${TESTPROGS} testnumcpus testdiag testlinuxstreamingwrite testlowmembamheaderparser"
TESTPROGS="${TESTPROGS} testgeneflatfile testurlinputstream testsimpletrie testgnutls testlru"
TESTPROGS="${TESTPROGS} testbytecnt teststronglyconnectedcomponents"
TESTPROGS="${TESTPROGS} testtopologicalsorting testlinebuffer testsamdecoder testdecimalnumberparser"
TESTPROGS="${TESTPROGS} testunsignedinteger testmd5 testsha testsinglefileserver"
TESTPROGS="${TESTPROGS} testparallelbamvalidation testparallelbamrewrite testbammateerase testparallelbamblocksort"
TESTPROGS="${TESTPROGS} testmapperm testexternalmemoryindex testfastqtobam testsamrecoding testdazzlerdb testnd testfastashred testalignerspeed testfastasingleline testdazzleralignmentrewrite"
TESTPROGS="${TESTPROGS} testxz testdazzlerindex testargparser testfragmentenvelope testdnarank testlowbits testfastaexplode testfaextract testmurmur3 testpairalign testsplaytree testbwtconstruction testbwtconstructionfasta"
TESTPROGS="${TESTPROGS} testarrayinput testhugepages testsymcnt testgammapd testpo testdnasuffixtrav testserialisedsorting testbamnumericalindex testnpl testkcnt testintervaltree testbamgetrefreg"
TESTPROGS="${TESTPROGS} teststringgraph testlognormal testConstantSumCombinatorics testmatrix testlibarchive testconvpowercache testlassort testthreadpoolbgzfdecode testnnplocalaligner"

if test "${mavx2}" = "yes" ; then
	TESTPROGS="${TESTPROGS} testavx"
fi

HDF5CPPFLAGS=
HDF5CXXFLAGS=
HDF5LDFLAGS=
HDF5LIBS=
if test ! -z "${LIBMAUS2_HAVE_HDF5}" ; then
	TESTPROGS="${TESTPROGS} testhdf5"
	if test ! -z "${HDF5DIR}" ; then
		HDF5CPPFLAGS="-I${HDF5DIR}/include"
		HDF5LDFLAGS="-L${HDF5DIR}/lib -Wl,-rpath=${HDF5DIR}/lib"
	fi
	HDF5LIBS="-lhdf5_hl -lhdf5"
fi

if test ! -z "${LIBMAUS2_HAVE_IRODS}" ; then
	TESTPROGS="${TESTPROGS} testirods"
	LIBMAUSIRODSPC="libmaus2irods.pc"
else
	IRODSCPPFLAGS=
	IRODSCXXFLAGS=
	IRODSLDFLAGS=
	IRODSLIBS=
fi

AC_ARG_WITH([gmp],
            [AS_HELP_STRING([--with-gmp@<:@=PATH@:>@], [path to installed gmp library @<:@default=no@:>@])],
            [with_gmp=${withval}],
            [with_gmp=])

LIBMAUS2_HAVE_GMP=
gmp_CFLAGS=
gmp_LIBS=
if test "${with_gmp}" != "no" ; then
	AC_MSG_CHECKING([whether we can compile a program using the gmp library])
	LDFLAGS_SAVE=${LDFLAGS}
	CPPFLAGS_SAVE=${CPPFLAGS}
	LIBS_SAVE=${LIBS}
	
	if test \( ! -z "${with_gmp}" \) -a \( "${with_gmp}" != "yes" \) ; then
		LDFLAGS="-L${with_gmp}/lib"
		CPPFLAGS="-I${with_gmp}/include"
	fi

	LIBS="-lgmp ${LIBS}"

	AC_LANG_PUSH([C++])
	AC_LINK_IFELSE([AC_LANG_SOURCE([
#include <gmp.h>

int main(int argc, char * argv[[]]) {
	return 0;
}])],
			have_gmp=yes,
			have_gmp=no
		)
	AC_LANG_POP
	AC_MSG_RESULT($have_gmp)

	LDFLAGS=${LDFLAGS_SAVE}
	CPPFLAGS=${CPPFLAGS_SAVE}
	LIBS=${LIBS_SAVE}

	if test "${have_gmp}" = "yes" ; then
		if test "${with_gmp}" != "yes" ; then
			GMPLDFLAGS="-L${with_gmp}/lib"
			GMPCPPFLAGS="-I${with_gmp}/include"
		else
			GMPLDFLAGS=
			GMPCPPFLAGS=
		fi
		LIBMAUS2_HAVE_GMP="#define LIBMAUS2_HAVE_GMP"
		GMPLIBS="-lgmp"
	else
		GMPLDFLAGS=
		GMPCPPFLAGS=
		GMPLIBS=
	fi
fi

AC_ARG_WITH([daligner],
	[AS_HELP_STRING([--with-daligner@<:@=PATH@:>@], [path to installed daligner align library @<:@default=no@:>@])],
	[with_daligner=${withval}],
	[with_daligner=no])
LIBMAUS2_HAVE_DALIGNER=
DALIGNERCPPFLAGS=
DALIGNERLDFLAGS=
DALIGNERLIBS=

if test "${with_daligner}" != "no" ; then
	DALIGNERDIR=
	if test "${with_daligner}" != "yes" ; then
		DALIGNERDIR=${with_daligner}
	fi
	
	CPPFLAGS_SAVE=${CPPFLAGS}
	CXXFLAGS_SAVE=${CXXFLAGS}
	LIBS_SAVE=${LIBS}
	LDFLAGS_SAVE=${LDFLAGS}
	
	if test -z "${DALIGNERDIR}" ; then
		DALIGNERCPPFLAGS=
		DALIGNERLDFLAGS=
		DALIGNERLIBS="-lalign"
		
		CPPFLAGS="${CPPFLAGS} ${DALIGNERCPPFLAGS}"
		LDFLAGS="${LDFLAGS} ${DALIGNERLDFLAGS}"
		LIBS="${LIBS} ${DALIGNERLIBS}"

                AC_LANG_PUSH([C++])
                AC_CHECK_HEADER(align.h, [daligner_align_h=yes], [daligner_align_h=no])
                AC_LANG_POP

		if test "${daligner_align_h}" = "yes" ; then
			AC_MSG_CHECKING([for align.h])
			AC_LANG_PUSH([C++])
			AC_TRY_LINK([#include <align.h>
				],[
				return 0;
			],[daligner_align_h=yes],[daligner_align_h=no])
			AC_MSG_RESULT([${daligner_align_h}])	
                fi
	else
		DALIGNERCPPFLAGS="-I${DALIGNERDIR}/include"
		DALIGNERLDFLAGS="-L${DALIGNERDIR}/lib -Wl,-rpath=${DALIGNERDIR}/lib"
		DALIGNERLIBS="-lalign"
		
		CPPFLAGS="${CPPFLAGS} ${DALIGNERCPPFLAGS}"
		LDFLAGS="${LDFLAGS} ${DALIGNERLDFLAGS}"
		LIBS="${LIBS} ${DALIGNERLIBS}"
		
		AC_LANG_PUSH([C++])
		AC_CHECK_HEADER(align.h, [daligner_align_h=yes], [daligner_align_h=no])
		AC_LANG_POP

		if test "${daligner_align_h}" = "yes" ; then
			AC_MSG_CHECKING([for align.h])
			AC_LANG_PUSH([C++])
			AC_TRY_LINK([#include <align.h>
				],[
				return 0;
			],[daligner_align_h=yes],[daligner_align_h=no])
			AC_MSG_RESULT([${daligner_align_h}])	
                fi

		if test ${daligner_align_h} = "no" ; then
			AS_UNSET(ac_cv_header_align_h)
			
			CPPFLAGS=${CPPFLAGS_SAVE}
			CXXFLAGS=${CXXFLAGS_SAVE}
			LIBS=${LIBS_SAVE}
			LDFLAGS=${LDFLAGS_SAVE}

			DALIGNERCPPFLAGS="-I${DALIGNERDIR}/include"
			DALIGNERLDFLAGS="-L${DALIGNERDIR}/lib"
			DALIGNERLIBS="-lalign"
		
			CPPFLAGS="${CPPFLAGS} ${DALIGNERCPPFLAGS}"
			LDFLAGS="${LDFLAGS} ${DALIGNERLDFLAGS}"
			LIBS="${LIBS} ${DALIGNERLIBS}"
		
			AC_LANG_PUSH([C++])
			AC_CHECK_HEADER(align.h, [daligner_align_h=yes], [daligner_align_h=no])
			AC_LANG_POP
			if test "${daligner_align_h}" = "yes" ; then
				AC_MSG_CHECKING([for align.h])
				AC_LANG_PUSH([C++])
				AC_TRY_LINK([#include <align.h>
					],[
					return 0;
				],[daligner_align_h=yes],[daligner_align_h=no])
				AC_MSG_RESULT([${daligner_align_h}])	
			fi
		fi

		if test ${daligner_align_h} = "no" ; then
			AS_UNSET(ac_cv_header_align_h)
			
			CPPFLAGS=${CPPFLAGS_SAVE}
			CXXFLAGS=${CXXFLAGS_SAVE}
			LIBS=${LIBS_SAVE}
			LDFLAGS=${LDFLAGS_SAVE}

			DALIGNERCPPFLAGS="-I${DALIGNERDIR}"
			DALIGNERLDFLAGS="-L${DALIGNERDIR}"
			DALIGNERLIBS="-lalign"
		
			CPPFLAGS="${CPPFLAGS} ${DALIGNERCPPFLAGS}"
			LDFLAGS="${LDFLAGS} ${DALIGNERLDFLAGS}"
			LIBS="${LIBS} ${DALIGNERLIBS}"
		
			AC_LANG_PUSH([C++])
			AC_CHECK_HEADER(align.h, [daligner_align_h=yes], [daligner_align_h=no])
			AC_LANG_POP
			if test "${daligner_align_h}" = "yes" ; then
				AC_MSG_CHECKING([for align.h])
				AC_LANG_PUSH([C++])
				AC_TRY_LINK([#include <align.h>
					],[
					return 0;
				],[daligner_align_h=yes],[daligner_align_h=no])
				AC_MSG_RESULT([${daligner_align_h}])	
			fi
		fi
	fi
	
	
	if test "${daligner_align_h}" = "yes" ; then	
AC_MSG_CHECKING([whether we can compile a program using the daligner library])
AC_LANG_PUSH([C++])
	AC_TRY_LINK([
#include <align.h>
#include <cstdlib>
#include <cstring>

struct DalignerWorkData
{
	Work_Data * data;
	
	DalignerWorkData() : data(NULL)
	{
		data = New_Work_Data();

		if ( ! data )
		{
			abort();
		}
	}
	
	~DalignerWorkData()
	{
		Free_Work_Data(data);
	}
};
],[
	char t[] = "ACGTACGT";
	char q[] = "ACGTTACGT";
	size_t const tn = strlen(t);
	size_t const qn = strlen(q);
	Path path;
	path.trace = NULL;
	path.tlen = 0;
	path.diffs = 40;
	path.abpos = 0;
	path.bbpos = 0;
	path.aepos = tn;
	path.bepos = qn;

	Alignment algn;
	algn.path = &path;
	algn.flags = 0;
	algn.aseq = t;
	algn.bseq = q;
	algn.alen = tn;
	algn.blen = qn;
	
	DalignerWorkData DWD;

	Compute_Trace_ALL(&algn,DWD.data);

	float freq[] = { 0.25, 0.25, 0.25, 0.25 };
	Align_Spec * spec = New_Align_Spec(0.75 /* correlation */, 100 /* tspace */, &freq[0]);
	Work_Data * workdata = New_Work_Data();
	Alignment align;

	Path * la_path = Local_Alignment(&align,workdata,spec,0,0,0,-1,-1);

	Free_Work_Data(workdata);
	Free_Align_Spec(spec);

	return 0;
],[daligner=yes],[daligner=no])
AC_MSG_RESULT([${daligner}])
		if test "${daligner}" = "yes" ; then
			LIBMAUS2_HAVE_DALIGNER="#define LIBMAUS2_HAVE_DALIGNER"
		fi
	fi

	CPPFLAGS=${CPPFLAGS_SAVE}
	CXXFLAGS=${CXXFLAGS_SAVE}
	LIBS=${LIBS_SAVE}
	LDFLAGS=${LDFLAGS_SAVE}
fi

AC_ARG_WITH([fftw],
            [AS_HELP_STRING([--with-fftw@<:@=PATH@:>@], [path to installed fftw library @<:@default=@:>@])],
            [with_fftw=${withval}],
            [with_fftw=no])

LIBMAUS2_HAVE_FFTW=
if test "${with_fftw}" != "no" ; then
	if test ! -z "${with_fftw}" ; then
		PKGCONFIGPATHSAVE="${PKG_CONFIG_PATH}"
		if test -z "${PKG_CONFIG_PATH}" ; then
			export PKG_CONFIG_PATH="${with_fftw}/lib/pkgconfig"
		else
			export PKG_CONFIG_PATH="${with_fftw}/lib/pkgconfig:${PKG_CONFIG_PATH}"
		fi
	fi

	PKG_CHECK_MODULES([fftw3],[fftw3 >= 3.3.4])

	if test ! -z "${with_fftw}" ; then
		if test ! -z "${PKGCONFIGPATHSAVE}" ; then
			export PKG_CONFIG_PATH="${PKGCONFIGPATHSAVE}"
		fi
	fi

	FFTWCPPFLAGS="${fftw3_CFLAGS}"
	FFTWLIBS="${fftw3_LIBS}"

	LIBMAUS2_HAVE_FFTW="#define LIBMAUS2_HAVE_FFTW"
fi

AC_ARG_ENABLE(compile-testprograms,
        AS_HELP_STRING([--enable-compile-testprograms],[enable compilation of uninstalled test programs (default yes)]),
        [compiletestprograms=${enableval}],[compiletestprograms=yes])

if test "${compiletestprograms}" != "yes" ; then
	TESTPROGS=
fi

AC_SYS_LARGEFILE
LIBMAUS2_FILEOFFSET_BITS=
if test \( ! -z "${ac_cv_sys_file_offset_bits}" \) -a \( "${ac_cv_sys_file_offset_bits}" != "no" \) ; then
	LIBMAUS2_FILEOFFSET_BITS="#define _FILE_OFFSET_BITS ${ac_cv_sys_file_offset_bits}"
fi
AC_FUNC_FSEEKO
LIBMAUS2_LARGEFILE_SOURCE=
if test ! -z "${ac_cv_sys_largefile_source}" ; then
	if test "${ac_cv_sys_largefile_source}" = 1 ; then
		LIBMAUS2_LARGEFILE_SOURCE="#define _LARGEFILE_SOURCE 1"
	fi
fi

ac_cv_sys_largefile_source=1

CPPFLAGS="${CPPFLAGS} ${LIBMAUSCPPFLAGS}"
CFLAGS="${CFLAGS} ${LIBMAUSCFLAGS}"
CXXFLAGS="${CXXFLAGS} ${LIBMAUSCXXFLAGS}"
LIBS="${LIBS} ${LIBMAUSLIBS}"

AC_SUBST([PACKAGE_NAME])
AC_SUBST([PACKAGE_VERSION])
AC_SUBST([SYS_TYPES_H])
AC_SUBST([UNIQUEPTR])
AC_SUBST([SHAREDPTR])
AC_SUBST([UNORDEREDSET])
AC_SUBST([UNORDEREDMAP])
AC_SUBST([CSTDINT])
AC_SUBST([ENDIANESS])
AC_SUBST([HAVESSE4])
AC_SUBST([HAVEAIO])
AC_SUBST([HAVESEMINIT])
AC_SUBST([HAVESEMDESTROY])
AC_SUBST([HAVESEMWAIT])
AC_SUBST([HAVESEMPOST])
AC_SUBST([HAVESEMTIMEDWAIT])
AC_SUBST([HAVEPTHREADS])
AC_SUBST([HAVESYNCOPS])
AC_SUBST([HAVEPOSIXMEMALIGN])
AC_SUBST([MOVEFUNC])
AC_SUBST([HAVEI386])
AC_SUBST([HAVEX8664])
AC_SUBST([HAVESSSE3])
AC_SUBST([WINDOWSH])
AC_SUBST([SYSTIMEH])
AC_SUBST([LIBMAUSCPPFLAGS])
AC_SUBST([LIBMAUSCXXFLAGS])
AC_SUBST([LIBMAUSLDFLAGS])
AC_SUBST([LIBMAUSLIBS])
AC_SUBST([LIBMAUSARCHCFLAGS])
AC_SUBST([FILTERRELATIONMATRIX])
AC_SUBST([LIBMAUSPKGCPPFLAGS])
AC_SUBST([LIBMAUSPKGCXXFLAGS])
AC_SUBST([LIBMAUSPKGLIBS])
AC_SUBST([LIBRARY_VERSION])
AC_SUBST([LIBMAUS2_HAVE_EXECINFO_H])
AC_SUBST([HAVEBACKTRACE])
AC_SUBST([HAVEWINDOWSH])
AC_SUBST([HAVESETRLIMIT])
AC_SUBST([ZLIBREQ])
AC_SUBST([SDSLCPPFLAGS])
AC_SUBST([SDSLCXXFLAGS])
AC_SUBST([SDSLLIBS])
AC_SUBST([USEASSEMBLY])
AC_SUBST([HAVEUNISTDH])
AC_SUBST([HAVESTDINTH])
AC_SUBST([REGEXH])
AC_SUBST([LIBMAUSHAVESNAPPY])
AC_SUBST([HAVEDLFCNH])
AC_SUBST([abs_builddir])
AC_SUBST([DLFUNCS])
AC_SUBST([DLLIB])
AC_SUBST([SNAPPYCPPFLAGS])
AC_SUBST([SNAPPYCXXFLAGS])
AC_SUBST([SNAPPYLDFLAGS])
AC_SUBST([SNAPPYLIBS])
AC_SUBST([ZLIBCPPFLAGS])
AC_SUBST([ZLIBCXXFLAGS])
AC_SUBST([ZLIBLIBS])
AC_SUBST([LIBMAUSSTATIC])
AC_SUBST([HAVEPTHREADSETNAME_NP])
AC_SUBST([HAVEPTHREADSET_NAME_NP])
AC_SUBST([HAVEPTHREADGETNAME_NP])
AC_SUBST([HAVEPTHREADGET_NAME_NP])
AC_SUBST([HAVEPRCTL])
AC_SUBST([LIBMAUS2_SIZEOF_UNSIGNED_LONG])
AC_SUBST([IOLIBDEFINE])
AC_SUBST([IOLIBCPPFLAGS])
AC_SUBST([IOLIBLDFLAGS])
AC_SUBST([IOLIBLIBS])
AC_SUBST([HAVEGETPAGESIZE])
AC_SUBST([HAVEMSGCMSGCLOEXEC])
AC_SUBST([WARNCPPFLAGS])
AC_SUBST([POSIXSPINLOCKS])
AC_SUBST([HAVESYNCLOCK])
AC_SUBST([HAVEDARWINSPINLOCKS])
AC_SUBST([HAVESYSVFSH])
AC_SUBST([LIBMAUS2_HAVE_STATFS])
AC_SUBST([HAVEUNSIGNEDINT128])
AC_SUBST([HAVEHAVEFEATURESH])
AC_SUBST([HAVEPTHREADSETAFFINITYNP])
AC_SUBST([LIBMAUS2_HAVE_IGZIP])
AC_SUBST([IGZIPCPPFLAGS])
AC_SUBST([IGZIPLDFLAGS])
AC_SUBST([IGZIPLIBS])
AC_SUBST([GNUTLSLIBS])
AC_SUBST([GNUTLSCPPFLAGS])
AC_SUBST([GNUTLSLDFLAGS])
AC_SUBST([GNUTLS])
AC_SUBST([GNUTLSREQ])
AC_SUBST([NETTLELIBS])
AC_SUBST([NETTLECPPFLAGS])
AC_SUBST([NETTLELDFLAGS])
AC_SUBST([NETTLE])
AC_SUBST([NETTLEREQ])
AC_SUBST([YASMEXE])
AC_SUBST([DIGESTASMOBJ])
AC_SUBST([LIBMAUS2_HAVE_SHA2_ASSEMBLY])
AC_SUBST([TESTPROGS])
AC_SUBST([HAVESMMINTRINH])
AC_SUBST([MSSE4])
AC_SUBST([LIBMAUS2_HAVE_HDF5])
AC_SUBST([HDF5DIR])
AC_SUBST([HDF5CPPFLAGS])
AC_SUBST([HDF5CXXFLAGS])
AC_SUBST([HDF5LDFLAGS])
AC_SUBST([HDF5LIBS])
AC_SUBST([IRODSDIR])
AC_SUBST([LIBMAUS2_HAVE_IRODS])
AC_SUBST([IRODSCPPFLAGS])
AC_SUBST([IRODSCXXFLAGS])
AC_SUBST([IRODSLDFLAGS])
AC_SUBST([IRODSLIBS])
AC_SUBST([IRODSDIR])
AC_SUBST([LIBMAUSIRODSPC])
AC_SUBST([IOLIBCALLBACKDEFINE])
AC_SUBST([LIBMAUS2_FILEOFFSET_BITS])
AC_SUBST([LIBMAUS2_LARGEFILE_SOURCE])
AC_SUBST([IOLIBINDEXCALLBACKDEFINE])
AC_SUBST([LIBMAUS2_HAVE_GMP])
AC_SUBST([GMPLIBS])
AC_SUBST([GMPLDFLAGS])
AC_SUBST([GMPCPPFLAGS])
AC_SUBST([GMPLIBS])
AC_SUBST([IOLIBNEWINTERFACEDEFINE])
AC_SUBST([LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_X128_8])
AC_SUBST([LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_X128_16])
AC_SUBST([LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_Y256_8])
AC_SUBST([LIBMAUS2_HAVE_GLOBAL_ALIGNMENT_Y256_16])
AC_SUBST([MSSE2])
AC_SUBST([MSSSE3])
AC_SUBST([MSSE41])
AC_SUBST([MAVX2])
AC_SUBST([LIBMAUS2_HAVE_DALIGNER])
AC_SUBST([DALIGNERCPPFLAGS])
AC_SUBST([DALIGNERLDFLAGS])
AC_SUBST([DALIGNERLIBS])
AC_SUBST([PKGSSE4])
AC_SUBST([LIBMAUS2_HAVE_LZMA])
AC_SUBST([LIBMAUS2_LZMA_LIBS])
AC_SUBST([LIBMAUS2_LZMA_CPPFLAGS])
AC_SUBST([LIBMAUS2_LZMA_REQ])
AC_SUBST([LIBMAUS2_HAVE_LIBARCHIVE])
AC_SUBST([LIBMAUS2_LIBARCHIVE_LIBS])
AC_SUBST([LIBMAUS2_LIBARCHIVE_CPPFLAGS])
AC_SUBST([LIBMAUS2_LIBARCHIVE_REQ])
AC_SUBST([LIBMAUS2_IRODS_NEED_PREFIX])
AC_SUBST([LIBMAUS2_NETTLE_HAVE_SHA3])
AC_SUBST([LIBMAUS2_HAVE_MMAP])
AC_SUBST([LIBMAUS2_HAVE_MMAP_HUGEPAGES])
AC_SUBST([LIBMAUS2_DEBUG_COMPILED])
AC_SUBST([LIBMAUS2_AUTOARRAY_AUTOARRAYTRACE])
AC_SUBST([LIBMAUS2_HAVE_FFTW])
AC_SUBST([FFTWCPPFLAGS])
AC_SUBST([FFTWLDFLAGS])
AC_SUBST([FFTWLIBS])
AC_SUBST([TESTDIR])
AC_SUBST([LIBMAUS2_HAVE_AVX])
AC_SUBST([LIBMAUS2_HAVE_AVX2])
AC_SUBST([LIBMAUS2_HAVE_ALIGNMENT_ONE_TO_MANY_AVX2])
AC_SUBST([LIBMAUS2_HAVE_STATFS_F_BSIZE])
AC_SUBST([LIBMAUS2_HAVE_STATFS_F_IOSIZE])
AC_SUBST([LIBMAUS2_HAVE_FCNTL])
AC_SUBST([HAVEPTHREADATTRSETAFFINITYNP])
AC_SUBST([HAVELINUXSYSCTLH])
AC_OUTPUT(Makefile src/Makefile libmaus2.pc libmaus2digests.pc libmaus2irods.pc libmaus2seqchksumsfactory.pc libmaus2fftw.pc ubuntu.sh src/libmaus2/LibMausConfig.hpp test/Makefile)
